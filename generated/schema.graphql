### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AnnProfDept {
  id: String!
}

input AnnProfDeptCreateInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutAnnProfDeptInput
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutAnnProfDeptInput!
  id: String
  Prof: ProfCreateOneWithoutAnnProfDeptInput!
  SchoolYear: SchoolYearCreateOneWithoutAnnProfDeptInput!
  updatedAt: DateTime
}

input AnnProfDeptCreateManyWithoutDepartmentInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutDepartmentInput!]
  create: [AnnProfDeptCreateWithoutDepartmentInput!]
}

input AnnProfDeptCreateManyWithoutProfInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutProfInput!]
  create: [AnnProfDeptCreateWithoutProfInput!]
}

input AnnProfDeptCreateManyWithoutSchoolYearInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutSchoolYearInput!]
  create: [AnnProfDeptCreateWithoutSchoolYearInput!]
}

input AnnProfDeptCreateOneWithoutAnnProfSubjInput {
  connect: AnnProfDeptWhereUniqueInput
  connectOrCreate: AnnProfDeptCreateOrConnectWithoutannProfSubjInput
  create: AnnProfDeptCreateWithoutAnnProfSubjInput
}

input AnnProfDeptCreateOrConnectWithoutannProfSubjInput {
  create: AnnProfDeptCreateWithoutAnnProfSubjInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptCreateOrConnectWithoutDepartmentInput {
  create: AnnProfDeptCreateWithoutDepartmentInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptCreateOrConnectWithoutProfInput {
  create: AnnProfDeptCreateWithoutProfInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptCreateOrConnectWithoutSchoolYearInput {
  create: AnnProfDeptCreateWithoutSchoolYearInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptCreateWithoutAnnProfSubjInput {
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutAnnProfDeptInput!
  id: String
  Prof: ProfCreateOneWithoutAnnProfDeptInput!
  SchoolYear: SchoolYearCreateOneWithoutAnnProfDeptInput!
  updatedAt: DateTime
}

input AnnProfDeptCreateWithoutDepartmentInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutAnnProfDeptInput
  createdAt: DateTime
  id: String
  Prof: ProfCreateOneWithoutAnnProfDeptInput!
  SchoolYear: SchoolYearCreateOneWithoutAnnProfDeptInput!
  updatedAt: DateTime
}

input AnnProfDeptCreateWithoutProfInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutAnnProfDeptInput
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutAnnProfDeptInput!
  id: String
  SchoolYear: SchoolYearCreateOneWithoutAnnProfDeptInput!
  updatedAt: DateTime
}

input AnnProfDeptCreateWithoutSchoolYearInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutAnnProfDeptInput
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutAnnProfDeptInput!
  id: String
  Prof: ProfCreateOneWithoutAnnProfDeptInput!
  updatedAt: DateTime
}

input AnnProfDeptListRelationFilter {
  every: AnnProfDeptWhereInput
  none: AnnProfDeptWhereInput
  some: AnnProfDeptWhereInput
}

input AnnProfDeptScalarWhereInput {
  AND: [AnnProfDeptScalarWhereInput!]
  createdAt: DateTimeFilter
  departmentId: StringFilter
  id: StringFilter
  NOT: [AnnProfDeptScalarWhereInput!]
  OR: [AnnProfDeptScalarWhereInput!]
  profId: StringFilter
  schoolYearId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnProfDeptUpdateInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutAnnProfDeptInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutAnnProfDeptInput
  id: StringFieldUpdateOperationsInput
  Prof: ProfUpdateOneRequiredWithoutAnnProfDeptInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnProfDeptInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateManyWithoutDepartmentInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutDepartmentInput!]
  create: [AnnProfDeptCreateWithoutDepartmentInput!]
  delete: [AnnProfDeptWhereUniqueInput!]
  deleteMany: [AnnProfDeptScalarWhereInput!]
  disconnect: [AnnProfDeptWhereUniqueInput!]
  set: [AnnProfDeptWhereUniqueInput!]
  update: [AnnProfDeptUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [AnnProfDeptUpdateManyWithWhereWithoutDepartmentInput!]
  upsert: [AnnProfDeptUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input AnnProfDeptUpdateManyWithoutProfInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutProfInput!]
  create: [AnnProfDeptCreateWithoutProfInput!]
  delete: [AnnProfDeptWhereUniqueInput!]
  deleteMany: [AnnProfDeptScalarWhereInput!]
  disconnect: [AnnProfDeptWhereUniqueInput!]
  set: [AnnProfDeptWhereUniqueInput!]
  update: [AnnProfDeptUpdateWithWhereUniqueWithoutProfInput!]
  updateMany: [AnnProfDeptUpdateManyWithWhereWithoutProfInput!]
  upsert: [AnnProfDeptUpsertWithWhereUniqueWithoutProfInput!]
}

input AnnProfDeptUpdateManyWithoutSchoolYearInput {
  connect: [AnnProfDeptWhereUniqueInput!]
  connectOrCreate: [AnnProfDeptCreateOrConnectWithoutSchoolYearInput!]
  create: [AnnProfDeptCreateWithoutSchoolYearInput!]
  delete: [AnnProfDeptWhereUniqueInput!]
  deleteMany: [AnnProfDeptScalarWhereInput!]
  disconnect: [AnnProfDeptWhereUniqueInput!]
  set: [AnnProfDeptWhereUniqueInput!]
  update: [AnnProfDeptUpdateWithWhereUniqueWithoutSchoolYearInput!]
  updateMany: [AnnProfDeptUpdateManyWithWhereWithoutSchoolYearInput!]
  upsert: [AnnProfDeptUpsertWithWhereUniqueWithoutSchoolYearInput!]
}

input AnnProfDeptUpdateManyWithWhereWithoutDepartmentInput {
  data: AnnProfDeptUpdateManyMutationInput!
  where: AnnProfDeptScalarWhereInput!
}

input AnnProfDeptUpdateManyWithWhereWithoutProfInput {
  data: AnnProfDeptUpdateManyMutationInput!
  where: AnnProfDeptScalarWhereInput!
}

input AnnProfDeptUpdateManyWithWhereWithoutSchoolYearInput {
  data: AnnProfDeptUpdateManyMutationInput!
  where: AnnProfDeptScalarWhereInput!
}

input AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput {
  connect: AnnProfDeptWhereUniqueInput
  connectOrCreate: AnnProfDeptCreateOrConnectWithoutannProfSubjInput
  create: AnnProfDeptCreateWithoutAnnProfSubjInput
  update: AnnProfDeptUpdateWithoutAnnProfSubjInput
  upsert: AnnProfDeptUpsertWithoutAnnProfSubjInput
}

input AnnProfDeptUpdateWithoutAnnProfSubjInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutAnnProfDeptInput
  id: StringFieldUpdateOperationsInput
  Prof: ProfUpdateOneRequiredWithoutAnnProfDeptInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnProfDeptInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateWithoutDepartmentInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutAnnProfDeptInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Prof: ProfUpdateOneRequiredWithoutAnnProfDeptInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnProfDeptInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateWithoutProfInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutAnnProfDeptInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutAnnProfDeptInput
  id: StringFieldUpdateOperationsInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnProfDeptInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateWithoutSchoolYearInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutAnnProfDeptInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutAnnProfDeptInput
  id: StringFieldUpdateOperationsInput
  Prof: ProfUpdateOneRequiredWithoutAnnProfDeptInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfDeptUpdateWithWhereUniqueWithoutDepartmentInput {
  data: AnnProfDeptUpdateWithoutDepartmentInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptUpdateWithWhereUniqueWithoutProfInput {
  data: AnnProfDeptUpdateWithoutProfInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptUpdateWithWhereUniqueWithoutSchoolYearInput {
  data: AnnProfDeptUpdateWithoutSchoolYearInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptUpsertWithoutAnnProfSubjInput {
  create: AnnProfDeptCreateWithoutAnnProfSubjInput!
  update: AnnProfDeptUpdateWithoutAnnProfSubjInput!
}

input AnnProfDeptUpsertWithWhereUniqueWithoutDepartmentInput {
  create: AnnProfDeptCreateWithoutDepartmentInput!
  update: AnnProfDeptUpdateWithoutDepartmentInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptUpsertWithWhereUniqueWithoutProfInput {
  create: AnnProfDeptCreateWithoutProfInput!
  update: AnnProfDeptUpdateWithoutProfInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptUpsertWithWhereUniqueWithoutSchoolYearInput {
  create: AnnProfDeptCreateWithoutSchoolYearInput!
  update: AnnProfDeptUpdateWithoutSchoolYearInput!
  where: AnnProfDeptWhereUniqueInput!
}

input AnnProfDeptWhereInput {
  AND: [AnnProfDeptWhereInput!]
  annProfSubj: AnnProfSubjDistroListRelationFilter
  createdAt: DateTimeFilter
  Department: DepartmentWhereInput
  departmentId: StringFilter
  id: StringFilter
  NOT: [AnnProfDeptWhereInput!]
  OR: [AnnProfDeptWhereInput!]
  Prof: ProfWhereInput
  profId: StringFilter
  SchoolYear: SchoolYearWhereInput
  schoolYearId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnProfDeptWhereUniqueInput {
  id: String
}

type AnnProfSubjDistro {
  id: String!
}

input AnnProfSubjDistroCreateInput {
  AnnProfDept: AnnProfDeptCreateOneWithoutAnnProfSubjInput!
  Classroom: ClassroomCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  Logbook: LogbookCreateManyWithoutAnnProfSubjDistroInput
  score: ScoreCreateManyWithoutAnnProfSubjInput
  Subject: SubjectCreateOneWithoutAnnProfSubjInput!
  updatedAt: DateTime
}

input AnnProfSubjDistroCreateManyWithoutAnnProfDeptInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutAnnProfDeptInput!]
  create: [AnnProfSubjDistroCreateWithoutAnnProfDeptInput!]
}

input AnnProfSubjDistroCreateManyWithoutClassroomInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutClassroomInput!]
  create: [AnnProfSubjDistroCreateWithoutClassroomInput!]
}

input AnnProfSubjDistroCreateManyWithoutScoreInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutscoreInput!]
  create: [AnnProfSubjDistroCreateWithoutScoreInput!]
}

input AnnProfSubjDistroCreateManyWithoutSubjectInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutSubjectInput!]
  create: [AnnProfSubjDistroCreateWithoutSubjectInput!]
}

input AnnProfSubjDistroCreateOneWithoutLogbookInput {
  connect: AnnProfSubjDistroWhereUniqueInput
  connectOrCreate: AnnProfSubjDistroCreateOrConnectWithoutLogbookInput
  create: AnnProfSubjDistroCreateWithoutLogbookInput
}

input AnnProfSubjDistroCreateOrConnectWithoutAnnProfDeptInput {
  create: AnnProfSubjDistroCreateWithoutAnnProfDeptInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroCreateOrConnectWithoutClassroomInput {
  create: AnnProfSubjDistroCreateWithoutClassroomInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroCreateOrConnectWithoutLogbookInput {
  create: AnnProfSubjDistroCreateWithoutLogbookInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroCreateOrConnectWithoutscoreInput {
  create: AnnProfSubjDistroCreateWithoutScoreInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroCreateOrConnectWithoutSubjectInput {
  create: AnnProfSubjDistroCreateWithoutSubjectInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroCreateWithoutAnnProfDeptInput {
  Classroom: ClassroomCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  Logbook: LogbookCreateManyWithoutAnnProfSubjDistroInput
  score: ScoreCreateManyWithoutAnnProfSubjInput
  Subject: SubjectCreateOneWithoutAnnProfSubjInput!
  updatedAt: DateTime
}

input AnnProfSubjDistroCreateWithoutClassroomInput {
  AnnProfDept: AnnProfDeptCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  Logbook: LogbookCreateManyWithoutAnnProfSubjDistroInput
  score: ScoreCreateManyWithoutAnnProfSubjInput
  Subject: SubjectCreateOneWithoutAnnProfSubjInput!
  updatedAt: DateTime
}

input AnnProfSubjDistroCreateWithoutLogbookInput {
  AnnProfDept: AnnProfDeptCreateOneWithoutAnnProfSubjInput!
  Classroom: ClassroomCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  score: ScoreCreateManyWithoutAnnProfSubjInput
  Subject: SubjectCreateOneWithoutAnnProfSubjInput!
  updatedAt: DateTime
}

input AnnProfSubjDistroCreateWithoutScoreInput {
  AnnProfDept: AnnProfDeptCreateOneWithoutAnnProfSubjInput!
  Classroom: ClassroomCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  Logbook: LogbookCreateManyWithoutAnnProfSubjDistroInput
  Subject: SubjectCreateOneWithoutAnnProfSubjInput!
  updatedAt: DateTime
}

input AnnProfSubjDistroCreateWithoutSubjectInput {
  AnnProfDept: AnnProfDeptCreateOneWithoutAnnProfSubjInput!
  Classroom: ClassroomCreateOneWithoutAnnProfSubjInput!
  createdAt: DateTime
  id: String
  Logbook: LogbookCreateManyWithoutAnnProfSubjDistroInput
  score: ScoreCreateManyWithoutAnnProfSubjInput
  updatedAt: DateTime
}

input AnnProfSubjDistroListRelationFilter {
  every: AnnProfSubjDistroWhereInput
  none: AnnProfSubjDistroWhereInput
  some: AnnProfSubjDistroWhereInput
}

input AnnProfSubjDistroScalarWhereInput {
  AND: [AnnProfSubjDistroScalarWhereInput!]
  annProfDeptId: StringFilter
  classroomId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AnnProfSubjDistroScalarWhereInput!]
  OR: [AnnProfSubjDistroScalarWhereInput!]
  subjectId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnProfSubjDistroUpdateInput {
  AnnProfDept: AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput
  Classroom: ClassroomUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Logbook: LogbookUpdateManyWithoutAnnProfSubjDistroInput
  score: ScoreUpdateManyWithoutAnnProfSubjInput
  Subject: SubjectUpdateOneRequiredWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateManyWithoutAnnProfDeptInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutAnnProfDeptInput!]
  create: [AnnProfSubjDistroCreateWithoutAnnProfDeptInput!]
  delete: [AnnProfSubjDistroWhereUniqueInput!]
  deleteMany: [AnnProfSubjDistroScalarWhereInput!]
  disconnect: [AnnProfSubjDistroWhereUniqueInput!]
  set: [AnnProfSubjDistroWhereUniqueInput!]
  update: [AnnProfSubjDistroUpdateWithWhereUniqueWithoutAnnProfDeptInput!]
  updateMany: [AnnProfSubjDistroUpdateManyWithWhereWithoutAnnProfDeptInput!]
  upsert: [AnnProfSubjDistroUpsertWithWhereUniqueWithoutAnnProfDeptInput!]
}

input AnnProfSubjDistroUpdateManyWithoutClassroomInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutClassroomInput!]
  create: [AnnProfSubjDistroCreateWithoutClassroomInput!]
  delete: [AnnProfSubjDistroWhereUniqueInput!]
  deleteMany: [AnnProfSubjDistroScalarWhereInput!]
  disconnect: [AnnProfSubjDistroWhereUniqueInput!]
  set: [AnnProfSubjDistroWhereUniqueInput!]
  update: [AnnProfSubjDistroUpdateWithWhereUniqueWithoutClassroomInput!]
  updateMany: [AnnProfSubjDistroUpdateManyWithWhereWithoutClassroomInput!]
  upsert: [AnnProfSubjDistroUpsertWithWhereUniqueWithoutClassroomInput!]
}

input AnnProfSubjDistroUpdateManyWithoutScoreInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutscoreInput!]
  create: [AnnProfSubjDistroCreateWithoutScoreInput!]
  delete: [AnnProfSubjDistroWhereUniqueInput!]
  deleteMany: [AnnProfSubjDistroScalarWhereInput!]
  disconnect: [AnnProfSubjDistroWhereUniqueInput!]
  set: [AnnProfSubjDistroWhereUniqueInput!]
  update: [AnnProfSubjDistroUpdateWithWhereUniqueWithoutScoreInput!]
  updateMany: [AnnProfSubjDistroUpdateManyWithWhereWithoutScoreInput!]
  upsert: [AnnProfSubjDistroUpsertWithWhereUniqueWithoutScoreInput!]
}

input AnnProfSubjDistroUpdateManyWithoutSubjectInput {
  connect: [AnnProfSubjDistroWhereUniqueInput!]
  connectOrCreate: [AnnProfSubjDistroCreateOrConnectWithoutSubjectInput!]
  create: [AnnProfSubjDistroCreateWithoutSubjectInput!]
  delete: [AnnProfSubjDistroWhereUniqueInput!]
  deleteMany: [AnnProfSubjDistroScalarWhereInput!]
  disconnect: [AnnProfSubjDistroWhereUniqueInput!]
  set: [AnnProfSubjDistroWhereUniqueInput!]
  update: [AnnProfSubjDistroUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [AnnProfSubjDistroUpdateManyWithWhereWithoutSubjectInput!]
  upsert: [AnnProfSubjDistroUpsertWithWhereUniqueWithoutSubjectInput!]
}

input AnnProfSubjDistroUpdateManyWithWhereWithoutAnnProfDeptInput {
  data: AnnProfSubjDistroUpdateManyMutationInput!
  where: AnnProfSubjDistroScalarWhereInput!
}

input AnnProfSubjDistroUpdateManyWithWhereWithoutClassroomInput {
  data: AnnProfSubjDistroUpdateManyMutationInput!
  where: AnnProfSubjDistroScalarWhereInput!
}

input AnnProfSubjDistroUpdateManyWithWhereWithoutScoreInput {
  data: AnnProfSubjDistroUpdateManyMutationInput!
  where: AnnProfSubjDistroScalarWhereInput!
}

input AnnProfSubjDistroUpdateManyWithWhereWithoutSubjectInput {
  data: AnnProfSubjDistroUpdateManyMutationInput!
  where: AnnProfSubjDistroScalarWhereInput!
}

input AnnProfSubjDistroUpdateOneRequiredWithoutLogbookInput {
  connect: AnnProfSubjDistroWhereUniqueInput
  connectOrCreate: AnnProfSubjDistroCreateOrConnectWithoutLogbookInput
  create: AnnProfSubjDistroCreateWithoutLogbookInput
  update: AnnProfSubjDistroUpdateWithoutLogbookInput
  upsert: AnnProfSubjDistroUpsertWithoutLogbookInput
}

input AnnProfSubjDistroUpdateWithoutAnnProfDeptInput {
  Classroom: ClassroomUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Logbook: LogbookUpdateManyWithoutAnnProfSubjDistroInput
  score: ScoreUpdateManyWithoutAnnProfSubjInput
  Subject: SubjectUpdateOneRequiredWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateWithoutClassroomInput {
  AnnProfDept: AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Logbook: LogbookUpdateManyWithoutAnnProfSubjDistroInput
  score: ScoreUpdateManyWithoutAnnProfSubjInput
  Subject: SubjectUpdateOneRequiredWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateWithoutLogbookInput {
  AnnProfDept: AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput
  Classroom: ClassroomUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  score: ScoreUpdateManyWithoutAnnProfSubjInput
  Subject: SubjectUpdateOneRequiredWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateWithoutScoreInput {
  AnnProfDept: AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput
  Classroom: ClassroomUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Logbook: LogbookUpdateManyWithoutAnnProfSubjDistroInput
  Subject: SubjectUpdateOneRequiredWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateWithoutSubjectInput {
  AnnProfDept: AnnProfDeptUpdateOneRequiredWithoutAnnProfSubjInput
  Classroom: ClassroomUpdateOneRequiredWithoutAnnProfSubjInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Logbook: LogbookUpdateManyWithoutAnnProfSubjDistroInput
  score: ScoreUpdateManyWithoutAnnProfSubjInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnProfSubjDistroUpdateWithWhereUniqueWithoutAnnProfDeptInput {
  data: AnnProfSubjDistroUpdateWithoutAnnProfDeptInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpdateWithWhereUniqueWithoutClassroomInput {
  data: AnnProfSubjDistroUpdateWithoutClassroomInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpdateWithWhereUniqueWithoutScoreInput {
  data: AnnProfSubjDistroUpdateWithoutScoreInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpdateWithWhereUniqueWithoutSubjectInput {
  data: AnnProfSubjDistroUpdateWithoutSubjectInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpsertWithoutLogbookInput {
  create: AnnProfSubjDistroCreateWithoutLogbookInput!
  update: AnnProfSubjDistroUpdateWithoutLogbookInput!
}

input AnnProfSubjDistroUpsertWithWhereUniqueWithoutAnnProfDeptInput {
  create: AnnProfSubjDistroCreateWithoutAnnProfDeptInput!
  update: AnnProfSubjDistroUpdateWithoutAnnProfDeptInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpsertWithWhereUniqueWithoutClassroomInput {
  create: AnnProfSubjDistroCreateWithoutClassroomInput!
  update: AnnProfSubjDistroUpdateWithoutClassroomInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpsertWithWhereUniqueWithoutScoreInput {
  create: AnnProfSubjDistroCreateWithoutScoreInput!
  update: AnnProfSubjDistroUpdateWithoutScoreInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroUpsertWithWhereUniqueWithoutSubjectInput {
  create: AnnProfSubjDistroCreateWithoutSubjectInput!
  update: AnnProfSubjDistroUpdateWithoutSubjectInput!
  where: AnnProfSubjDistroWhereUniqueInput!
}

input AnnProfSubjDistroWhereInput {
  AND: [AnnProfSubjDistroWhereInput!]
  AnnProfDept: AnnProfDeptWhereInput
  annProfDeptId: StringFilter
  Classroom: ClassroomWhereInput
  classroomId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  Logbook: LogbookListRelationFilter
  NOT: [AnnProfSubjDistroWhereInput!]
  OR: [AnnProfSubjDistroWhereInput!]
  score: ScoreListRelationFilter
  Subject: SubjectWhereInput
  subjectId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnProfSubjDistroWhereUniqueInput {
  id: String
}

type AnnStudentClassroom {
  id: String!
}

input AnnStudentClassroomCreateInput {
  Classroom: ClassroomCreateOneWithoutAnnStudentClassroomInput!
  createdAt: DateTime
  feePayment: FinanceCreateManyWithoutAnnStudentClassroomInput
  id: String
  SchoolYear: SchoolYearCreateOneWithoutAnnStudentClassroomInput!
  score: ScoreCreateManyWithoutAnnStudentClassInput
  Student: StudentCreateOneWithoutAnnStudentClassroomInput!
  updatedAt: DateTime
}

input AnnStudentClassroomCreateManyWithoutClassroomInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutClassroomInput!]
  create: [AnnStudentClassroomCreateWithoutClassroomInput!]
}

input AnnStudentClassroomCreateManyWithoutSchoolYearInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutSchoolYearInput!]
  create: [AnnStudentClassroomCreateWithoutSchoolYearInput!]
}

input AnnStudentClassroomCreateManyWithoutScoreInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutscoreInput!]
  create: [AnnStudentClassroomCreateWithoutScoreInput!]
}

input AnnStudentClassroomCreateManyWithoutStudentInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutStudentInput!]
  create: [AnnStudentClassroomCreateWithoutStudentInput!]
}

input AnnStudentClassroomCreateOrConnectWithoutClassroomInput {
  create: AnnStudentClassroomCreateWithoutClassroomInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomCreateOrConnectWithoutSchoolYearInput {
  create: AnnStudentClassroomCreateWithoutSchoolYearInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomCreateOrConnectWithoutscoreInput {
  create: AnnStudentClassroomCreateWithoutScoreInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomCreateOrConnectWithoutStudentInput {
  create: AnnStudentClassroomCreateWithoutStudentInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomCreateWithoutClassroomInput {
  createdAt: DateTime
  feePayment: FinanceCreateManyWithoutAnnStudentClassroomInput
  id: String
  SchoolYear: SchoolYearCreateOneWithoutAnnStudentClassroomInput!
  score: ScoreCreateManyWithoutAnnStudentClassInput
  Student: StudentCreateOneWithoutAnnStudentClassroomInput!
  updatedAt: DateTime
}

input AnnStudentClassroomCreateWithoutSchoolYearInput {
  Classroom: ClassroomCreateOneWithoutAnnStudentClassroomInput!
  createdAt: DateTime
  feePayment: FinanceCreateManyWithoutAnnStudentClassroomInput
  id: String
  score: ScoreCreateManyWithoutAnnStudentClassInput
  Student: StudentCreateOneWithoutAnnStudentClassroomInput!
  updatedAt: DateTime
}

input AnnStudentClassroomCreateWithoutScoreInput {
  Classroom: ClassroomCreateOneWithoutAnnStudentClassroomInput!
  createdAt: DateTime
  feePayment: FinanceCreateManyWithoutAnnStudentClassroomInput
  id: String
  SchoolYear: SchoolYearCreateOneWithoutAnnStudentClassroomInput!
  Student: StudentCreateOneWithoutAnnStudentClassroomInput!
  updatedAt: DateTime
}

input AnnStudentClassroomCreateWithoutStudentInput {
  Classroom: ClassroomCreateOneWithoutAnnStudentClassroomInput!
  createdAt: DateTime
  feePayment: FinanceCreateManyWithoutAnnStudentClassroomInput
  id: String
  SchoolYear: SchoolYearCreateOneWithoutAnnStudentClassroomInput!
  score: ScoreCreateManyWithoutAnnStudentClassInput
  updatedAt: DateTime
}

input AnnStudentClassroomListRelationFilter {
  every: AnnStudentClassroomWhereInput
  none: AnnStudentClassroomWhereInput
  some: AnnStudentClassroomWhereInput
}

input AnnStudentClassroomScalarWhereInput {
  AND: [AnnStudentClassroomScalarWhereInput!]
  classroomId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AnnStudentClassroomScalarWhereInput!]
  OR: [AnnStudentClassroomScalarWhereInput!]
  schoolYearId: StringFilter
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnStudentClassroomUpdateInput {
  Classroom: ClassroomUpdateOneRequiredWithoutAnnStudentClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePayment: FinanceUpdateManyWithoutAnnStudentClassroomInput
  id: StringFieldUpdateOperationsInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnStudentClassroomInput
  score: ScoreUpdateManyWithoutAnnStudentClassInput
  Student: StudentUpdateOneRequiredWithoutAnnStudentClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateManyWithoutClassroomInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutClassroomInput!]
  create: [AnnStudentClassroomCreateWithoutClassroomInput!]
  delete: [AnnStudentClassroomWhereUniqueInput!]
  deleteMany: [AnnStudentClassroomScalarWhereInput!]
  disconnect: [AnnStudentClassroomWhereUniqueInput!]
  set: [AnnStudentClassroomWhereUniqueInput!]
  update: [AnnStudentClassroomUpdateWithWhereUniqueWithoutClassroomInput!]
  updateMany: [AnnStudentClassroomUpdateManyWithWhereWithoutClassroomInput!]
  upsert: [AnnStudentClassroomUpsertWithWhereUniqueWithoutClassroomInput!]
}

input AnnStudentClassroomUpdateManyWithoutSchoolYearInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutSchoolYearInput!]
  create: [AnnStudentClassroomCreateWithoutSchoolYearInput!]
  delete: [AnnStudentClassroomWhereUniqueInput!]
  deleteMany: [AnnStudentClassroomScalarWhereInput!]
  disconnect: [AnnStudentClassroomWhereUniqueInput!]
  set: [AnnStudentClassroomWhereUniqueInput!]
  update: [AnnStudentClassroomUpdateWithWhereUniqueWithoutSchoolYearInput!]
  updateMany: [AnnStudentClassroomUpdateManyWithWhereWithoutSchoolYearInput!]
  upsert: [AnnStudentClassroomUpsertWithWhereUniqueWithoutSchoolYearInput!]
}

input AnnStudentClassroomUpdateManyWithoutScoreInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutscoreInput!]
  create: [AnnStudentClassroomCreateWithoutScoreInput!]
  delete: [AnnStudentClassroomWhereUniqueInput!]
  deleteMany: [AnnStudentClassroomScalarWhereInput!]
  disconnect: [AnnStudentClassroomWhereUniqueInput!]
  set: [AnnStudentClassroomWhereUniqueInput!]
  update: [AnnStudentClassroomUpdateWithWhereUniqueWithoutScoreInput!]
  updateMany: [AnnStudentClassroomUpdateManyWithWhereWithoutScoreInput!]
  upsert: [AnnStudentClassroomUpsertWithWhereUniqueWithoutScoreInput!]
}

input AnnStudentClassroomUpdateManyWithoutStudentInput {
  connect: [AnnStudentClassroomWhereUniqueInput!]
  connectOrCreate: [AnnStudentClassroomCreateOrConnectWithoutStudentInput!]
  create: [AnnStudentClassroomCreateWithoutStudentInput!]
  delete: [AnnStudentClassroomWhereUniqueInput!]
  deleteMany: [AnnStudentClassroomScalarWhereInput!]
  disconnect: [AnnStudentClassroomWhereUniqueInput!]
  set: [AnnStudentClassroomWhereUniqueInput!]
  update: [AnnStudentClassroomUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [AnnStudentClassroomUpdateManyWithWhereWithoutStudentInput!]
  upsert: [AnnStudentClassroomUpsertWithWhereUniqueWithoutStudentInput!]
}

input AnnStudentClassroomUpdateManyWithWhereWithoutClassroomInput {
  data: AnnStudentClassroomUpdateManyMutationInput!
  where: AnnStudentClassroomScalarWhereInput!
}

input AnnStudentClassroomUpdateManyWithWhereWithoutSchoolYearInput {
  data: AnnStudentClassroomUpdateManyMutationInput!
  where: AnnStudentClassroomScalarWhereInput!
}

input AnnStudentClassroomUpdateManyWithWhereWithoutScoreInput {
  data: AnnStudentClassroomUpdateManyMutationInput!
  where: AnnStudentClassroomScalarWhereInput!
}

input AnnStudentClassroomUpdateManyWithWhereWithoutStudentInput {
  data: AnnStudentClassroomUpdateManyMutationInput!
  where: AnnStudentClassroomScalarWhereInput!
}

input AnnStudentClassroomUpdateWithoutClassroomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feePayment: FinanceUpdateManyWithoutAnnStudentClassroomInput
  id: StringFieldUpdateOperationsInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnStudentClassroomInput
  score: ScoreUpdateManyWithoutAnnStudentClassInput
  Student: StudentUpdateOneRequiredWithoutAnnStudentClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateWithoutSchoolYearInput {
  Classroom: ClassroomUpdateOneRequiredWithoutAnnStudentClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePayment: FinanceUpdateManyWithoutAnnStudentClassroomInput
  id: StringFieldUpdateOperationsInput
  score: ScoreUpdateManyWithoutAnnStudentClassInput
  Student: StudentUpdateOneRequiredWithoutAnnStudentClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateWithoutScoreInput {
  Classroom: ClassroomUpdateOneRequiredWithoutAnnStudentClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePayment: FinanceUpdateManyWithoutAnnStudentClassroomInput
  id: StringFieldUpdateOperationsInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnStudentClassroomInput
  Student: StudentUpdateOneRequiredWithoutAnnStudentClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateWithoutStudentInput {
  Classroom: ClassroomUpdateOneRequiredWithoutAnnStudentClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePayment: FinanceUpdateManyWithoutAnnStudentClassroomInput
  id: StringFieldUpdateOperationsInput
  SchoolYear: SchoolYearUpdateOneRequiredWithoutAnnStudentClassroomInput
  score: ScoreUpdateManyWithoutAnnStudentClassInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnStudentClassroomUpdateWithWhereUniqueWithoutClassroomInput {
  data: AnnStudentClassroomUpdateWithoutClassroomInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpdateWithWhereUniqueWithoutSchoolYearInput {
  data: AnnStudentClassroomUpdateWithoutSchoolYearInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpdateWithWhereUniqueWithoutScoreInput {
  data: AnnStudentClassroomUpdateWithoutScoreInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpdateWithWhereUniqueWithoutStudentInput {
  data: AnnStudentClassroomUpdateWithoutStudentInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpsertWithWhereUniqueWithoutClassroomInput {
  create: AnnStudentClassroomCreateWithoutClassroomInput!
  update: AnnStudentClassroomUpdateWithoutClassroomInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpsertWithWhereUniqueWithoutSchoolYearInput {
  create: AnnStudentClassroomCreateWithoutSchoolYearInput!
  update: AnnStudentClassroomUpdateWithoutSchoolYearInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpsertWithWhereUniqueWithoutScoreInput {
  create: AnnStudentClassroomCreateWithoutScoreInput!
  update: AnnStudentClassroomUpdateWithoutScoreInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomUpsertWithWhereUniqueWithoutStudentInput {
  create: AnnStudentClassroomCreateWithoutStudentInput!
  update: AnnStudentClassroomUpdateWithoutStudentInput!
  where: AnnStudentClassroomWhereUniqueInput!
}

input AnnStudentClassroomWhereInput {
  AND: [AnnStudentClassroomWhereInput!]
  Classroom: ClassroomWhereInput
  classroomId: StringFilter
  createdAt: DateTimeFilter
  feePayment: FinanceListRelationFilter
  id: StringFilter
  NOT: [AnnStudentClassroomWhereInput!]
  OR: [AnnStudentClassroomWhereInput!]
  SchoolYear: SchoolYearWhereInput
  schoolYearId: StringFilter
  score: ScoreListRelationFilter
  Student: StudentWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input AnnStudentClassroomWhereUniqueInput {
  id: String
}

type BatchPayload {
  count: Int!
}

type Classroom {
  annStudentClassroom: [AnnStudentClassroom]
  classCode: String!
  className: String!
  id: String!
}

input ClassroomCreateInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutClassroomInput
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutClassroomInput
  classCode: String!
  className: String!
  createdAt: DateTime
  id: String
  Section: SectionCreateOneWithoutClassroomInput!
  updatedAt: DateTime
}

input ClassroomCreateManyWithoutSectionInput {
  connect: [ClassroomWhereUniqueInput!]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSectionInput!]
  create: [ClassroomCreateWithoutSectionInput!]
}

input ClassroomCreateOneWithoutAnnProfSubjInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutannProfSubjInput
  create: ClassroomCreateWithoutAnnProfSubjInput
}

input ClassroomCreateOneWithoutAnnStudentClassroomInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutannStudentClassroomInput
  create: ClassroomCreateWithoutAnnStudentClassroomInput
}

input ClassroomCreateOrConnectWithoutannProfSubjInput {
  create: ClassroomCreateWithoutAnnProfSubjInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateOrConnectWithoutannStudentClassroomInput {
  create: ClassroomCreateWithoutAnnStudentClassroomInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateOrConnectWithoutSectionInput {
  create: ClassroomCreateWithoutSectionInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateWithoutAnnProfSubjInput {
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutClassroomInput
  classCode: String!
  className: String!
  createdAt: DateTime
  id: String
  Section: SectionCreateOneWithoutClassroomInput!
  updatedAt: DateTime
}

input ClassroomCreateWithoutAnnStudentClassroomInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutClassroomInput
  classCode: String!
  className: String!
  createdAt: DateTime
  id: String
  Section: SectionCreateOneWithoutClassroomInput!
  updatedAt: DateTime
}

input ClassroomCreateWithoutSectionInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutClassroomInput
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutClassroomInput
  classCode: String!
  className: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input ClassroomListRelationFilter {
  every: ClassroomWhereInput
  none: ClassroomWhereInput
  some: ClassroomWhereInput
}

input ClassroomScalarWhereInput {
  AND: [ClassroomScalarWhereInput!]
  classCode: StringFilter
  className: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ClassroomScalarWhereInput!]
  OR: [ClassroomScalarWhereInput!]
  sectionId: StringFilter
  updatedAt: DateTimeFilter
}

input ClassroomUpdateInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutClassroomInput
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutClassroomInput
  classCode: StringFieldUpdateOperationsInput
  className: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyMutationInput {
  classCode: StringFieldUpdateOperationsInput
  className: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyWithoutSectionInput {
  connect: [ClassroomWhereUniqueInput!]
  connectOrCreate: [ClassroomCreateOrConnectWithoutSectionInput!]
  create: [ClassroomCreateWithoutSectionInput!]
  delete: [ClassroomWhereUniqueInput!]
  deleteMany: [ClassroomScalarWhereInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  set: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutSectionInput!]
  updateMany: [ClassroomUpdateManyWithWhereWithoutSectionInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutSectionInput!]
}

input ClassroomUpdateManyWithWhereWithoutSectionInput {
  data: ClassroomUpdateManyMutationInput!
  where: ClassroomScalarWhereInput!
}

input ClassroomUpdateOneRequiredWithoutAnnProfSubjInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutannProfSubjInput
  create: ClassroomCreateWithoutAnnProfSubjInput
  update: ClassroomUpdateWithoutAnnProfSubjInput
  upsert: ClassroomUpsertWithoutAnnProfSubjInput
}

input ClassroomUpdateOneRequiredWithoutAnnStudentClassroomInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutannStudentClassroomInput
  create: ClassroomCreateWithoutAnnStudentClassroomInput
  update: ClassroomUpdateWithoutAnnStudentClassroomInput
  upsert: ClassroomUpsertWithoutAnnStudentClassroomInput
}

input ClassroomUpdateWithoutAnnProfSubjInput {
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutClassroomInput
  classCode: StringFieldUpdateOperationsInput
  className: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutAnnStudentClassroomInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutClassroomInput
  classCode: StringFieldUpdateOperationsInput
  className: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutSectionInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutClassroomInput
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutClassroomInput
  classCode: StringFieldUpdateOperationsInput
  className: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithWhereUniqueWithoutSectionInput {
  data: ClassroomUpdateWithoutSectionInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpsertWithoutAnnProfSubjInput {
  create: ClassroomCreateWithoutAnnProfSubjInput!
  update: ClassroomUpdateWithoutAnnProfSubjInput!
}

input ClassroomUpsertWithoutAnnStudentClassroomInput {
  create: ClassroomCreateWithoutAnnStudentClassroomInput!
  update: ClassroomUpdateWithoutAnnStudentClassroomInput!
}

input ClassroomUpsertWithWhereUniqueWithoutSectionInput {
  create: ClassroomCreateWithoutSectionInput!
  update: ClassroomUpdateWithoutSectionInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomWhereInput {
  AND: [ClassroomWhereInput!]
  annProfSubj: AnnProfSubjDistroListRelationFilter
  annStudentClassroom: AnnStudentClassroomListRelationFilter
  classCode: StringFilter
  className: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ClassroomWhereInput!]
  OR: [ClassroomWhereInput!]
  Section: SectionWhereInput
  sectionId: StringFilter
  updatedAt: DateTimeFilter
}

input ClassroomWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Department {
  annProfDept: [AnnProfDept]
  deptCode: String!
  deptName: String!
  id: String!
  subject: [Subject]
}

input DepartmentCreateInput {
  annProfDept: AnnProfDeptCreateManyWithoutDepartmentInput
  createdAt: DateTime
  deptCode: String!
  deptName: String!
  id: String
  Section: SectionCreateOneWithoutDepartmentInput!
  subject: SubjectCreateManyWithoutDepartmentInput
  updatedAt: DateTime
}

input DepartmentCreateManyWithoutSectionInput {
  connect: [DepartmentWhereUniqueInput!]
  connectOrCreate: [DepartmentCreateOrConnectWithoutSectionInput!]
  create: [DepartmentCreateWithoutSectionInput!]
}

input DepartmentCreateOneWithoutAnnProfDeptInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutannProfDeptInput
  create: DepartmentCreateWithoutAnnProfDeptInput
}

input DepartmentCreateOneWithoutSubjectInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutsubjectInput
  create: DepartmentCreateWithoutSubjectInput
}

input DepartmentCreateOrConnectWithoutannProfDeptInput {
  create: DepartmentCreateWithoutAnnProfDeptInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateOrConnectWithoutSectionInput {
  create: DepartmentCreateWithoutSectionInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateOrConnectWithoutsubjectInput {
  create: DepartmentCreateWithoutSubjectInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateWithoutAnnProfDeptInput {
  createdAt: DateTime
  deptCode: String!
  deptName: String!
  id: String
  Section: SectionCreateOneWithoutDepartmentInput!
  subject: SubjectCreateManyWithoutDepartmentInput
  updatedAt: DateTime
}

input DepartmentCreateWithoutSectionInput {
  annProfDept: AnnProfDeptCreateManyWithoutDepartmentInput
  createdAt: DateTime
  deptCode: String!
  deptName: String!
  id: String
  subject: SubjectCreateManyWithoutDepartmentInput
  updatedAt: DateTime
}

input DepartmentCreateWithoutSubjectInput {
  annProfDept: AnnProfDeptCreateManyWithoutDepartmentInput
  createdAt: DateTime
  deptCode: String!
  deptName: String!
  id: String
  Section: SectionCreateOneWithoutDepartmentInput!
  updatedAt: DateTime
}

input DepartmentListRelationFilter {
  every: DepartmentWhereInput
  none: DepartmentWhereInput
  some: DepartmentWhereInput
}

input DepartmentScalarWhereInput {
  AND: [DepartmentScalarWhereInput!]
  createdAt: DateTimeFilter
  deptCode: StringFilter
  deptName: StringFilter
  id: StringFilter
  NOT: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  sectionId: StringFilter
  updatedAt: DateTimeFilter
}

input DepartmentUpdateInput {
  annProfDept: AnnProfDeptUpdateManyWithoutDepartmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deptCode: StringFieldUpdateOperationsInput
  deptName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutDepartmentInput
  subject: SubjectUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deptCode: StringFieldUpdateOperationsInput
  deptName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateManyWithoutSectionInput {
  connect: [DepartmentWhereUniqueInput!]
  connectOrCreate: [DepartmentCreateOrConnectWithoutSectionInput!]
  create: [DepartmentCreateWithoutSectionInput!]
  delete: [DepartmentWhereUniqueInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutSectionInput!]
  updateMany: [DepartmentUpdateManyWithWhereWithoutSectionInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutSectionInput!]
}

input DepartmentUpdateManyWithWhereWithoutSectionInput {
  data: DepartmentUpdateManyMutationInput!
  where: DepartmentScalarWhereInput!
}

input DepartmentUpdateOneRequiredWithoutAnnProfDeptInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutannProfDeptInput
  create: DepartmentCreateWithoutAnnProfDeptInput
  update: DepartmentUpdateWithoutAnnProfDeptInput
  upsert: DepartmentUpsertWithoutAnnProfDeptInput
}

input DepartmentUpdateOneRequiredWithoutSubjectInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutsubjectInput
  create: DepartmentCreateWithoutSubjectInput
  update: DepartmentUpdateWithoutSubjectInput
  upsert: DepartmentUpsertWithoutSubjectInput
}

input DepartmentUpdateWithoutAnnProfDeptInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deptCode: StringFieldUpdateOperationsInput
  deptName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutDepartmentInput
  subject: SubjectUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateWithoutSectionInput {
  annProfDept: AnnProfDeptUpdateManyWithoutDepartmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deptCode: StringFieldUpdateOperationsInput
  deptName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subject: SubjectUpdateManyWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateWithoutSubjectInput {
  annProfDept: AnnProfDeptUpdateManyWithoutDepartmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deptCode: StringFieldUpdateOperationsInput
  deptName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Section: SectionUpdateOneRequiredWithoutDepartmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateWithWhereUniqueWithoutSectionInput {
  data: DepartmentUpdateWithoutSectionInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentUpsertWithoutAnnProfDeptInput {
  create: DepartmentCreateWithoutAnnProfDeptInput!
  update: DepartmentUpdateWithoutAnnProfDeptInput!
}

input DepartmentUpsertWithoutSubjectInput {
  create: DepartmentCreateWithoutSubjectInput!
  update: DepartmentUpdateWithoutSubjectInput!
}

input DepartmentUpsertWithWhereUniqueWithoutSectionInput {
  create: DepartmentCreateWithoutSectionInput!
  update: DepartmentUpdateWithoutSectionInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  annProfDept: AnnProfDeptListRelationFilter
  createdAt: DateTimeFilter
  deptCode: StringFilter
  deptName: StringFilter
  id: StringFilter
  NOT: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  Section: SectionWhereInput
  sectionId: StringFilter
  subject: SubjectListRelationFilter
  updatedAt: DateTimeFilter
}

input DepartmentWhereUniqueInput {
  id: String
}

type Division {
  divisionCode: String!
  divisionName: String!
  id: String!
  subdivisions: [Subdivision]
}

input DivisionCreateInput {
  createdAt: DateTime
  divisionCode: String!
  divisionName: String!
  id: String
  Region: RegionCreateOneWithoutDivisionInput!
  subdiv: SubdivisionCreateManyWithoutDivisionInput
  updatedAt: DateTime
}

input DivisionCreateManyWithoutRegionInput {
  connect: [DivisionWhereUniqueInput!]
  connectOrCreate: [DivisionCreateOrConnectWithoutRegionInput!]
  create: [DivisionCreateWithoutRegionInput!]
}

input DivisionCreateOneWithoutSubdivInput {
  connect: DivisionWhereUniqueInput
  connectOrCreate: DivisionCreateOrConnectWithoutsubdivInput
  create: DivisionCreateWithoutSubdivInput
}

input DivisionCreateOrConnectWithoutRegionInput {
  create: DivisionCreateWithoutRegionInput!
  where: DivisionWhereUniqueInput!
}

input DivisionCreateOrConnectWithoutsubdivInput {
  create: DivisionCreateWithoutSubdivInput!
  where: DivisionWhereUniqueInput!
}

input DivisionCreateWithoutRegionInput {
  createdAt: DateTime
  divisionCode: String!
  divisionName: String!
  id: String
  subdiv: SubdivisionCreateManyWithoutDivisionInput
  updatedAt: DateTime
}

input DivisionCreateWithoutSubdivInput {
  createdAt: DateTime
  divisionCode: String!
  divisionName: String!
  id: String
  Region: RegionCreateOneWithoutDivisionInput!
  updatedAt: DateTime
}

input DivisionListRelationFilter {
  every: DivisionWhereInput
  none: DivisionWhereInput
  some: DivisionWhereInput
}

input DivisionScalarWhereInput {
  AND: [DivisionScalarWhereInput!]
  createdAt: DateTimeFilter
  divisionCode: StringFilter
  divisionName: StringFilter
  id: StringFilter
  NOT: [DivisionScalarWhereInput!]
  OR: [DivisionScalarWhereInput!]
  regionId: StringFilter
  updatedAt: DateTimeFilter
}

input DivisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  divisionCode: StringFieldUpdateOperationsInput
  divisionName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Region: RegionUpdateOneRequiredWithoutDivisionInput
  subdiv: SubdivisionUpdateManyWithoutDivisionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DivisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  divisionCode: StringFieldUpdateOperationsInput
  divisionName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DivisionUpdateManyWithoutRegionInput {
  connect: [DivisionWhereUniqueInput!]
  connectOrCreate: [DivisionCreateOrConnectWithoutRegionInput!]
  create: [DivisionCreateWithoutRegionInput!]
  delete: [DivisionWhereUniqueInput!]
  deleteMany: [DivisionScalarWhereInput!]
  disconnect: [DivisionWhereUniqueInput!]
  set: [DivisionWhereUniqueInput!]
  update: [DivisionUpdateWithWhereUniqueWithoutRegionInput!]
  updateMany: [DivisionUpdateManyWithWhereWithoutRegionInput!]
  upsert: [DivisionUpsertWithWhereUniqueWithoutRegionInput!]
}

input DivisionUpdateManyWithWhereWithoutRegionInput {
  data: DivisionUpdateManyMutationInput!
  where: DivisionScalarWhereInput!
}

input DivisionUpdateOneRequiredWithoutSubdivInput {
  connect: DivisionWhereUniqueInput
  connectOrCreate: DivisionCreateOrConnectWithoutsubdivInput
  create: DivisionCreateWithoutSubdivInput
  update: DivisionUpdateWithoutSubdivInput
  upsert: DivisionUpsertWithoutSubdivInput
}

input DivisionUpdateWithoutRegionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  divisionCode: StringFieldUpdateOperationsInput
  divisionName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subdiv: SubdivisionUpdateManyWithoutDivisionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DivisionUpdateWithoutSubdivInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  divisionCode: StringFieldUpdateOperationsInput
  divisionName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Region: RegionUpdateOneRequiredWithoutDivisionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DivisionUpdateWithWhereUniqueWithoutRegionInput {
  data: DivisionUpdateWithoutRegionInput!
  where: DivisionWhereUniqueInput!
}

input DivisionUpsertWithoutSubdivInput {
  create: DivisionCreateWithoutSubdivInput!
  update: DivisionUpdateWithoutSubdivInput!
}

input DivisionUpsertWithWhereUniqueWithoutRegionInput {
  create: DivisionCreateWithoutRegionInput!
  update: DivisionUpdateWithoutRegionInput!
  where: DivisionWhereUniqueInput!
}

input DivisionWhereInput {
  AND: [DivisionWhereInput!]
  createdAt: DateTimeFilter
  divisionCode: StringFilter
  divisionName: StringFilter
  id: StringFilter
  NOT: [DivisionWhereInput!]
  OR: [DivisionWhereInput!]
  Region: RegionWhereInput
  regionId: StringFilter
  subdiv: SubdivisionListRelationFilter
  updatedAt: DateTimeFilter
}

input DivisionWhereUniqueInput {
  id: String
}

input FinanceCreateManyWithoutAnnStudentClassroomInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutAnnStudentClassroomInput!]
  create: [FinanceCreateWithoutAnnStudentClassroomInput!]
}

input FinanceCreateOrConnectWithoutAnnStudentClassroomInput {
  create: FinanceCreateWithoutAnnStudentClassroomInput!
  where: FinanceWhereUniqueInput!
}

input FinanceCreateWithoutAnnStudentClassroomInput {
  amountPaid: Int!
  createdAt: DateTime
  id: String
  paymentDate: DateTime
  updatedAt: DateTime
}

input FinanceListRelationFilter {
  every: FinanceWhereInput
  none: FinanceWhereInput
  some: FinanceWhereInput
}

input FinanceScalarWhereInput {
  amountPaid: IntFilter
  AND: [FinanceScalarWhereInput!]
  annStudentClassroomId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FinanceScalarWhereInput!]
  OR: [FinanceScalarWhereInput!]
  paymentDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FinanceUpdateManyMutationInput {
  amountPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateManyWithoutAnnStudentClassroomInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutAnnStudentClassroomInput!]
  create: [FinanceCreateWithoutAnnStudentClassroomInput!]
  delete: [FinanceWhereUniqueInput!]
  deleteMany: [FinanceScalarWhereInput!]
  disconnect: [FinanceWhereUniqueInput!]
  set: [FinanceWhereUniqueInput!]
  update: [FinanceUpdateWithWhereUniqueWithoutAnnStudentClassroomInput!]
  updateMany: [FinanceUpdateManyWithWhereWithoutAnnStudentClassroomInput!]
  upsert: [FinanceUpsertWithWhereUniqueWithoutAnnStudentClassroomInput!]
}

input FinanceUpdateManyWithWhereWithoutAnnStudentClassroomInput {
  data: FinanceUpdateManyMutationInput!
  where: FinanceScalarWhereInput!
}

input FinanceUpdateWithoutAnnStudentClassroomInput {
  amountPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateWithWhereUniqueWithoutAnnStudentClassroomInput {
  data: FinanceUpdateWithoutAnnStudentClassroomInput!
  where: FinanceWhereUniqueInput!
}

input FinanceUpsertWithWhereUniqueWithoutAnnStudentClassroomInput {
  create: FinanceCreateWithoutAnnStudentClassroomInput!
  update: FinanceUpdateWithoutAnnStudentClassroomInput!
  where: FinanceWhereUniqueInput!
}

input FinanceWhereInput {
  amountPaid: IntFilter
  AND: [FinanceWhereInput!]
  AnnStudentClassroom: AnnStudentClassroomWhereInput
  annStudentClassroomId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FinanceWhereInput!]
  OR: [FinanceWhereInput!]
  paymentDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FinanceWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Logbook {
  id: String!
  subjectMatter: String!
  timeOfPeriod: DateTime!
}

input LogbookCreateInput {
  AnnProfSubjDistro: AnnProfSubjDistroCreateOneWithoutLogbookInput!
  createdAt: DateTime
  id: String
  subjectMatter: String!
  timeOfPeriod: DateTime
  updatedAt: DateTime
}

input LogbookCreateManyWithoutAnnProfSubjDistroInput {
  connect: [LogbookWhereUniqueInput!]
  connectOrCreate: [LogbookCreateOrConnectWithoutAnnProfSubjDistroInput!]
  create: [LogbookCreateWithoutAnnProfSubjDistroInput!]
}

input LogbookCreateOrConnectWithoutAnnProfSubjDistroInput {
  create: LogbookCreateWithoutAnnProfSubjDistroInput!
  where: LogbookWhereUniqueInput!
}

input LogbookCreateWithoutAnnProfSubjDistroInput {
  createdAt: DateTime
  id: String
  subjectMatter: String!
  timeOfPeriod: DateTime
  updatedAt: DateTime
}

input LogbookListRelationFilter {
  every: LogbookWhereInput
  none: LogbookWhereInput
  some: LogbookWhereInput
}

input LogbookScalarWhereInput {
  AND: [LogbookScalarWhereInput!]
  AnnProfSubjDistroId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LogbookScalarWhereInput!]
  OR: [LogbookScalarWhereInput!]
  subjectMatter: StringFilter
  timeOfPeriod: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LogbookUpdateInput {
  AnnProfSubjDistro: AnnProfSubjDistroUpdateOneRequiredWithoutLogbookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subjectMatter: StringFieldUpdateOperationsInput
  timeOfPeriod: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LogbookUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subjectMatter: StringFieldUpdateOperationsInput
  timeOfPeriod: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LogbookUpdateManyWithoutAnnProfSubjDistroInput {
  connect: [LogbookWhereUniqueInput!]
  connectOrCreate: [LogbookCreateOrConnectWithoutAnnProfSubjDistroInput!]
  create: [LogbookCreateWithoutAnnProfSubjDistroInput!]
  delete: [LogbookWhereUniqueInput!]
  deleteMany: [LogbookScalarWhereInput!]
  disconnect: [LogbookWhereUniqueInput!]
  set: [LogbookWhereUniqueInput!]
  update: [LogbookUpdateWithWhereUniqueWithoutAnnProfSubjDistroInput!]
  updateMany: [LogbookUpdateManyWithWhereWithoutAnnProfSubjDistroInput!]
  upsert: [LogbookUpsertWithWhereUniqueWithoutAnnProfSubjDistroInput!]
}

input LogbookUpdateManyWithWhereWithoutAnnProfSubjDistroInput {
  data: LogbookUpdateManyMutationInput!
  where: LogbookScalarWhereInput!
}

input LogbookUpdateWithoutAnnProfSubjDistroInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subjectMatter: StringFieldUpdateOperationsInput
  timeOfPeriod: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LogbookUpdateWithWhereUniqueWithoutAnnProfSubjDistroInput {
  data: LogbookUpdateWithoutAnnProfSubjDistroInput!
  where: LogbookWhereUniqueInput!
}

input LogbookUpsertWithWhereUniqueWithoutAnnProfSubjDistroInput {
  create: LogbookCreateWithoutAnnProfSubjDistroInput!
  update: LogbookUpdateWithoutAnnProfSubjDistroInput!
  where: LogbookWhereUniqueInput!
}

input LogbookWhereInput {
  AND: [LogbookWhereInput!]
  AnnProfSubjDistro: AnnProfSubjDistroWhereInput
  AnnProfSubjDistroId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LogbookWhereInput!]
  OR: [LogbookWhereInput!]
  subjectMatter: StringFilter
  timeOfPeriod: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LogbookWhereUniqueInput {
  id: String
}

type Mutation {
  createOneAnnProfDept(data: AnnProfDeptCreateInput!): AnnProfDept!
  createOneAnnProfSubjDistro(data: AnnProfSubjDistroCreateInput!): AnnProfSubjDistro!
  createOneAnnStudentClassroom(data: AnnStudentClassroomCreateInput!): AnnStudentClassroom!
  createOneClassroom(data: ClassroomCreateInput!): Classroom!
  createOneDepartment(data: DepartmentCreateInput!): Department!
  createOneDivision(data: DivisionCreateInput!): Division!
  createOneLogbook(data: LogbookCreateInput!): Logbook!
  createOneProf(data: ProfCreateInput!): Prof!
  createOneRegion(data: RegionCreateInput!): Region!
  createOneSchool(data: SchoolCreateInput!): School!
  createOneSchoolYear(data: SchoolYearCreateInput!): SchoolYear!
  createOneScore(data: ScoreCreateInput!): Score!
  createOneSection(data: SectionCreateInput!): Section!
  createOneSequence(data: SequenceCreateInput!): Sequence!
  createOneStudent(data: StudentCreateInput!): Student!
  createOneSubdivision(data: SubdivisionCreateInput!): Subdivision!
  createOneSubject(data: SubjectCreateInput!): Subject!
  createOneTerm(data: TermCreateInput!): Term!
  createOneTown(data: TownCreateInput!): Town!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAnnProfDept(where: AnnProfDeptWhereInput): BatchPayload!
  deleteManyAnnProfSubjDistro(where: AnnProfSubjDistroWhereInput): BatchPayload!
  deleteManyAnnStudentClassroom(where: AnnStudentClassroomWhereInput): BatchPayload!
  deleteManyClassroom(where: ClassroomWhereInput): BatchPayload!
  deleteManyDepartment(where: DepartmentWhereInput): BatchPayload!
  deleteManyDivision(where: DivisionWhereInput): BatchPayload!
  deleteManyLogbook(where: LogbookWhereInput): BatchPayload!
  deleteManyProf(where: ProfWhereInput): BatchPayload!
  deleteManyRegion(where: RegionWhereInput): BatchPayload!
  deleteManySchool(where: SchoolWhereInput): BatchPayload!
  deleteManySchoolYear(where: SchoolYearWhereInput): BatchPayload!
  deleteManyScore(where: ScoreWhereInput): BatchPayload!
  deleteManySequence(where: SequenceWhereInput): BatchPayload!
  deleteManyStudent(where: StudentWhereInput): BatchPayload!
  deleteManySubject(where: SubjectWhereInput): BatchPayload!
  deleteManyTerm(where: TermWhereInput): BatchPayload!
  deleteManyTown(where: TownWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneAnnProfDept(where: AnnProfDeptWhereUniqueInput!): AnnProfDept
  deleteOneAnnProfSubjDistro(where: AnnProfSubjDistroWhereUniqueInput!): AnnProfSubjDistro
  deleteOneAnnStudentClassroom(where: AnnStudentClassroomWhereUniqueInput!): AnnStudentClassroom
  deleteOneClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteOneDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteOneDivision(where: DivisionWhereUniqueInput!): Division
  deleteOneLogbook(where: LogbookWhereUniqueInput!): Logbook
  deleteOneProf(where: ProfWhereUniqueInput!): Prof
  deleteOneRegion(where: RegionWhereUniqueInput!): Region
  deleteOneSchool(where: SchoolWhereUniqueInput!): School
  deleteOneSchoolYear(where: SchoolYearWhereUniqueInput!): SchoolYear
  deleteOneScore(where: ScoreWhereUniqueInput!): Score
  deleteOneSection(where: SectionWhereUniqueInput!): Section
  deleteOneSequence(where: SequenceWhereUniqueInput!): Sequence
  deleteOneStudent(where: StudentWhereUniqueInput!): Student
  deleteOneSubdivision(where: SubdivisionWhereUniqueInput!): Subdivision
  deleteOneSubject(where: SubjectWhereUniqueInput!): Subject
  deleteOneTerm(where: TermWhereUniqueInput!): Term
  deleteOneTown(where: TownWhereUniqueInput!): Town
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManySection(data: SectionUpdateManyMutationInput!, where: SectionWhereInput): BatchPayload!
  updateManySubdivision(data: SubdivisionUpdateManyMutationInput!, where: SubdivisionWhereInput): BatchPayload!
  updateOneAnnProfDept(data: AnnProfDeptUpdateInput!, where: AnnProfDeptWhereUniqueInput!): AnnProfDept
  updateOneAnnProfSubjDistro(data: AnnProfSubjDistroUpdateInput!, where: AnnProfSubjDistroWhereUniqueInput!): AnnProfSubjDistro
  updateOneAnnStudentClassroom(data: AnnStudentClassroomUpdateInput!, where: AnnStudentClassroomWhereUniqueInput!): AnnStudentClassroom
  updateOneClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateOneDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateOneDivision(data: DivisionUpdateInput!, where: DivisionWhereUniqueInput!): Division
  updateOneLogbook(data: LogbookUpdateInput!, where: LogbookWhereUniqueInput!): Logbook
  updateOneProf(data: ProfUpdateInput!, where: ProfWhereUniqueInput!): Prof
  updateOneRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateOneSchool(data: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School
  updateOneSchoolYear(data: SchoolYearUpdateInput!, where: SchoolYearWhereUniqueInput!): SchoolYear
  updateOneScore(data: ScoreUpdateInput!, where: ScoreWhereUniqueInput!): Score
  updateOneSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateOneSequence(data: SequenceUpdateInput!, where: SequenceWhereUniqueInput!): Sequence
  updateOneStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateOneSubdivision(data: SubdivisionUpdateInput!, where: SubdivisionWhereUniqueInput!): Subdivision
  updateOneSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateOneTerm(data: TermUpdateInput!, where: TermWhereUniqueInput!): Term
  updateOneTown(data: TownUpdateInput!, where: TownWhereUniqueInput!): Town
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Prof {
  email: String!
  gender: String!
  id: String!
  image: String!
  phoneNumber: Int!
  prof1stName: String!
  prof2ndName: String!
  prof3rdName: String!
  profMatricule: String!
  profSecretCode: String!
  specialty: String!
}

input ProfCreateInput {
  annProfDept: AnnProfDeptCreateManyWithoutProfInput
  createdAt: DateTime
  email: String!
  gender: String!
  id: String
  image: String!
  phoneNumber: Int!
  prof1stName: String!
  prof2ndName: String!
  prof3rdName: String!
  profMatricule: String!
  profSecretCode: String!
  specialty: String!
  updatedAt: DateTime
}

input ProfCreateOneWithoutAnnProfDeptInput {
  connect: ProfWhereUniqueInput
  connectOrCreate: ProfCreateOrConnectWithoutannProfDeptInput
  create: ProfCreateWithoutAnnProfDeptInput
}

input ProfCreateOrConnectWithoutannProfDeptInput {
  create: ProfCreateWithoutAnnProfDeptInput!
  where: ProfWhereUniqueInput!
}

input ProfCreateWithoutAnnProfDeptInput {
  createdAt: DateTime
  email: String!
  gender: String!
  id: String
  image: String!
  phoneNumber: Int!
  prof1stName: String!
  prof2ndName: String!
  prof3rdName: String!
  profMatricule: String!
  profSecretCode: String!
  specialty: String!
  updatedAt: DateTime
}

input ProfUpdateInput {
  annProfDept: AnnProfDeptUpdateManyWithoutProfInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  phoneNumber: IntFieldUpdateOperationsInput
  prof1stName: StringFieldUpdateOperationsInput
  prof2ndName: StringFieldUpdateOperationsInput
  prof3rdName: StringFieldUpdateOperationsInput
  profMatricule: StringFieldUpdateOperationsInput
  profSecretCode: StringFieldUpdateOperationsInput
  specialty: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfUpdateOneRequiredWithoutAnnProfDeptInput {
  connect: ProfWhereUniqueInput
  connectOrCreate: ProfCreateOrConnectWithoutannProfDeptInput
  create: ProfCreateWithoutAnnProfDeptInput
  update: ProfUpdateWithoutAnnProfDeptInput
  upsert: ProfUpsertWithoutAnnProfDeptInput
}

input ProfUpdateWithoutAnnProfDeptInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  phoneNumber: IntFieldUpdateOperationsInput
  prof1stName: StringFieldUpdateOperationsInput
  prof2ndName: StringFieldUpdateOperationsInput
  prof3rdName: StringFieldUpdateOperationsInput
  profMatricule: StringFieldUpdateOperationsInput
  profSecretCode: StringFieldUpdateOperationsInput
  specialty: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfUpsertWithoutAnnProfDeptInput {
  create: ProfCreateWithoutAnnProfDeptInput!
  update: ProfUpdateWithoutAnnProfDeptInput!
}

input ProfWhereInput {
  AND: [ProfWhereInput!]
  annProfDept: AnnProfDeptListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  gender: StringFilter
  id: StringFilter
  image: StringFilter
  NOT: [ProfWhereInput!]
  OR: [ProfWhereInput!]
  phoneNumber: IntFilter
  prof1stName: StringFilter
  prof2ndName: StringFilter
  prof3rdName: StringFilter
  profMatricule: StringFilter
  profSecretCode: StringFilter
  specialty: StringFilter
  updatedAt: DateTimeFilter
}

input ProfWhereUniqueInput {
  id: String
  profMatricule: String
  profSecretCode: String
}

type Query {
  annProfDept(id: String): AnnProfDept
  annProfDepts: [AnnProfDept]
  annProfSubjDistro(id: String): AnnProfSubjDistro
  annProfSubjDistros: [AnnProfSubjDistro]
  annStudentClassroom(id: String): AnnStudentClassroom
  annStudentClassrooms: [AnnStudentClassroom]
  classroom(id: String): Classroom
  classrooms: [Classroom]
  department(id: String): Department
  departments: [Department]
  division(id: String): Division
  divisions: [Division]
  logbook(id: String): Logbook
  logbooks: [Logbook]
  prof(id: String): Prof
  profByMatricule(profMatricule: String): Prof
  profs: [Prof]
  region(id: String): Region
  regions: [Region]
  schoolByID(id: String): School
  schoolByPublicCode(schoolPublicCode: String): School
  schoolBySecretCode(schoolSecretCode: String): School
  schools: [School]
  schoolYear(id: String): SchoolYear
  schoolYears: [SchoolYear]
  score(id: String): Score
  scores: [Score]
  section(id: String): Section
  sections: [Section]
  sequence(id: String): Sequence
  sequences: [Sequence]
  student(id: String): Student
  students: [Student]
  subdivision(id: String): Subdivision
  subdivisions: [Subdivision]
  subject(id: String): Subject
  subjects: [Subject]
  term(id: String): Term
  terms: [Term]
  town(id: String): Town
  towns: [Town]
  user(id: String): User
  users: [User]
}

enum QueryMode {
  default
  insensitive
}

type Region {
  divisions: [Division]
  id: String!
  regCode: String!
  regName: String!
}

input RegionCreateInput {
  createdAt: DateTime
  division: DivisionCreateManyWithoutRegionInput
  id: String
  regCode: String!
  regName: String!
  updatedAt: DateTime
}

input RegionCreateOneWithoutDivisionInput {
  connect: RegionWhereUniqueInput
  connectOrCreate: RegionCreateOrConnectWithoutdivisionInput
  create: RegionCreateWithoutDivisionInput
}

input RegionCreateOrConnectWithoutdivisionInput {
  create: RegionCreateWithoutDivisionInput!
  where: RegionWhereUniqueInput!
}

input RegionCreateWithoutDivisionInput {
  createdAt: DateTime
  id: String
  regCode: String!
  regName: String!
  updatedAt: DateTime
}

input RegionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  division: DivisionUpdateManyWithoutRegionInput
  id: StringFieldUpdateOperationsInput
  regCode: StringFieldUpdateOperationsInput
  regName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RegionUpdateOneRequiredWithoutDivisionInput {
  connect: RegionWhereUniqueInput
  connectOrCreate: RegionCreateOrConnectWithoutdivisionInput
  create: RegionCreateWithoutDivisionInput
  update: RegionUpdateWithoutDivisionInput
  upsert: RegionUpsertWithoutDivisionInput
}

input RegionUpdateWithoutDivisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  regCode: StringFieldUpdateOperationsInput
  regName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RegionUpsertWithoutDivisionInput {
  create: RegionCreateWithoutDivisionInput!
  update: RegionUpdateWithoutDivisionInput!
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  createdAt: DateTimeFilter
  division: DivisionListRelationFilter
  id: StringFilter
  NOT: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  regCode: StringFilter
  regName: StringFilter
  updatedAt: DateTimeFilter
}

input RegionWhereUniqueInput {
  id: String
}

type School {
  id: String!
  schoolCode: String!
  schoolName: String!
  schoolPublicCode: String!
  schoolSecretCode: String!
  sections: [Section]
}

input SchoolCreateInput {
  createdAt: DateTime
  id: String
  schoolCode: String!
  schoolName: String!
  schoolPublicCode: String!
  schoolSecretCode: String!
  section: SectionCreateManyWithoutSchoolInput
  Town: TownCreateOneWithoutSchoolInput!
  updatedAt: DateTime
}

input SchoolCreateManyWithoutTownInput {
  connect: [SchoolWhereUniqueInput!]
  connectOrCreate: [SchoolCreateOrConnectWithoutTownInput!]
  create: [SchoolCreateWithoutTownInput!]
}

input SchoolCreateOneWithoutSectionInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutsectionInput
  create: SchoolCreateWithoutSectionInput
}

input SchoolCreateOrConnectWithoutsectionInput {
  create: SchoolCreateWithoutSectionInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutTownInput {
  create: SchoolCreateWithoutTownInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateWithoutSectionInput {
  createdAt: DateTime
  id: String
  schoolCode: String!
  schoolName: String!
  schoolPublicCode: String!
  schoolSecretCode: String!
  Town: TownCreateOneWithoutSchoolInput!
  updatedAt: DateTime
}

input SchoolCreateWithoutTownInput {
  createdAt: DateTime
  id: String
  schoolCode: String!
  schoolName: String!
  schoolPublicCode: String!
  schoolSecretCode: String!
  section: SectionCreateManyWithoutSchoolInput
  updatedAt: DateTime
}

input SchoolListRelationFilter {
  every: SchoolWhereInput
  none: SchoolWhereInput
  some: SchoolWhereInput
}

input SchoolScalarWhereInput {
  AND: [SchoolScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SchoolScalarWhereInput!]
  OR: [SchoolScalarWhereInput!]
  schoolCode: StringFilter
  schoolName: StringFilter
  schoolPublicCode: StringFilter
  schoolSecretCode: StringFilter
  townId: StringFilter
  updatedAt: DateTimeFilter
}

input SchoolUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schoolCode: StringFieldUpdateOperationsInput
  schoolName: StringFieldUpdateOperationsInput
  schoolPublicCode: StringFieldUpdateOperationsInput
  schoolSecretCode: StringFieldUpdateOperationsInput
  section: SectionUpdateManyWithoutSchoolInput
  Town: TownUpdateOneRequiredWithoutSchoolInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schoolCode: StringFieldUpdateOperationsInput
  schoolName: StringFieldUpdateOperationsInput
  schoolPublicCode: StringFieldUpdateOperationsInput
  schoolSecretCode: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateManyWithoutTownInput {
  connect: [SchoolWhereUniqueInput!]
  connectOrCreate: [SchoolCreateOrConnectWithoutTownInput!]
  create: [SchoolCreateWithoutTownInput!]
  delete: [SchoolWhereUniqueInput!]
  deleteMany: [SchoolScalarWhereInput!]
  disconnect: [SchoolWhereUniqueInput!]
  set: [SchoolWhereUniqueInput!]
  update: [SchoolUpdateWithWhereUniqueWithoutTownInput!]
  updateMany: [SchoolUpdateManyWithWhereWithoutTownInput!]
  upsert: [SchoolUpsertWithWhereUniqueWithoutTownInput!]
}

input SchoolUpdateManyWithWhereWithoutTownInput {
  data: SchoolUpdateManyMutationInput!
  where: SchoolScalarWhereInput!
}

input SchoolUpdateOneRequiredWithoutSectionInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutsectionInput
  create: SchoolCreateWithoutSectionInput
  update: SchoolUpdateWithoutSectionInput
  upsert: SchoolUpsertWithoutSectionInput
}

input SchoolUpdateWithoutSectionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schoolCode: StringFieldUpdateOperationsInput
  schoolName: StringFieldUpdateOperationsInput
  schoolPublicCode: StringFieldUpdateOperationsInput
  schoolSecretCode: StringFieldUpdateOperationsInput
  Town: TownUpdateOneRequiredWithoutSchoolInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateWithoutTownInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schoolCode: StringFieldUpdateOperationsInput
  schoolName: StringFieldUpdateOperationsInput
  schoolPublicCode: StringFieldUpdateOperationsInput
  schoolSecretCode: StringFieldUpdateOperationsInput
  section: SectionUpdateManyWithoutSchoolInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateWithWhereUniqueWithoutTownInput {
  data: SchoolUpdateWithoutTownInput!
  where: SchoolWhereUniqueInput!
}

input SchoolUpsertWithoutSectionInput {
  create: SchoolCreateWithoutSectionInput!
  update: SchoolUpdateWithoutSectionInput!
}

input SchoolUpsertWithWhereUniqueWithoutTownInput {
  create: SchoolCreateWithoutTownInput!
  update: SchoolUpdateWithoutTownInput!
  where: SchoolWhereUniqueInput!
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  schoolCode: StringFilter
  schoolName: StringFilter
  schoolPublicCode: StringFilter
  schoolSecretCode: StringFilter
  section: SectionListRelationFilter
  Town: TownWhereInput
  townId: StringFilter
  updatedAt: DateTimeFilter
}

input SchoolWhereUniqueInput {
  id: String
  schoolPublicCode: String
  schoolSecretCode: String
}

type SchoolYear {
  id: String!
  yearCode: String!
  yearName: String!
}

input SchoolYearCreateInput {
  annProfDept: AnnProfDeptCreateManyWithoutSchoolYearInput
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutSchoolYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearCode: String!
  yearName: String!
}

input SchoolYearCreateOneWithoutAnnProfDeptInput {
  connect: SchoolYearWhereUniqueInput
  connectOrCreate: SchoolYearCreateOrConnectWithoutannProfDeptInput
  create: SchoolYearCreateWithoutAnnProfDeptInput
}

input SchoolYearCreateOneWithoutAnnStudentClassroomInput {
  connect: SchoolYearWhereUniqueInput
  connectOrCreate: SchoolYearCreateOrConnectWithoutannStudentClassroomInput
  create: SchoolYearCreateWithoutAnnStudentClassroomInput
}

input SchoolYearCreateOrConnectWithoutannProfDeptInput {
  create: SchoolYearCreateWithoutAnnProfDeptInput!
  where: SchoolYearWhereUniqueInput!
}

input SchoolYearCreateOrConnectWithoutannStudentClassroomInput {
  create: SchoolYearCreateWithoutAnnStudentClassroomInput!
  where: SchoolYearWhereUniqueInput!
}

input SchoolYearCreateWithoutAnnProfDeptInput {
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutSchoolYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearCode: String!
  yearName: String!
}

input SchoolYearCreateWithoutAnnStudentClassroomInput {
  annProfDept: AnnProfDeptCreateManyWithoutSchoolYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearCode: String!
  yearName: String!
}

input SchoolYearUpdateInput {
  annProfDept: AnnProfDeptUpdateManyWithoutSchoolYearInput
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutSchoolYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearCode: StringFieldUpdateOperationsInput
  yearName: StringFieldUpdateOperationsInput
}

input SchoolYearUpdateOneRequiredWithoutAnnProfDeptInput {
  connect: SchoolYearWhereUniqueInput
  connectOrCreate: SchoolYearCreateOrConnectWithoutannProfDeptInput
  create: SchoolYearCreateWithoutAnnProfDeptInput
  update: SchoolYearUpdateWithoutAnnProfDeptInput
  upsert: SchoolYearUpsertWithoutAnnProfDeptInput
}

input SchoolYearUpdateOneRequiredWithoutAnnStudentClassroomInput {
  connect: SchoolYearWhereUniqueInput
  connectOrCreate: SchoolYearCreateOrConnectWithoutannStudentClassroomInput
  create: SchoolYearCreateWithoutAnnStudentClassroomInput
  update: SchoolYearUpdateWithoutAnnStudentClassroomInput
  upsert: SchoolYearUpsertWithoutAnnStudentClassroomInput
}

input SchoolYearUpdateWithoutAnnProfDeptInput {
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutSchoolYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearCode: StringFieldUpdateOperationsInput
  yearName: StringFieldUpdateOperationsInput
}

input SchoolYearUpdateWithoutAnnStudentClassroomInput {
  annProfDept: AnnProfDeptUpdateManyWithoutSchoolYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearCode: StringFieldUpdateOperationsInput
  yearName: StringFieldUpdateOperationsInput
}

input SchoolYearUpsertWithoutAnnProfDeptInput {
  create: SchoolYearCreateWithoutAnnProfDeptInput!
  update: SchoolYearUpdateWithoutAnnProfDeptInput!
}

input SchoolYearUpsertWithoutAnnStudentClassroomInput {
  create: SchoolYearCreateWithoutAnnStudentClassroomInput!
  update: SchoolYearUpdateWithoutAnnStudentClassroomInput!
}

input SchoolYearWhereInput {
  AND: [SchoolYearWhereInput!]
  annProfDept: AnnProfDeptListRelationFilter
  annStudentClassroom: AnnStudentClassroomListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SchoolYearWhereInput!]
  OR: [SchoolYearWhereInput!]
  updatedAt: DateTimeFilter
  yearCode: StringFilter
  yearName: StringFilter
}

input SchoolYearWhereUniqueInput {
  id: String
}

type Score {
  id: String!
  marks: String!
}

input ScoreCreateInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutScoreInput
  annStudentClass: AnnStudentClassroomCreateManyWithoutScoreInput
  createdAt: DateTime
  id: String
  marks: String!
  Sequence: SequenceCreateOneWithoutScoreInput!
  updatedAt: DateTime
}

input ScoreCreateManyWithoutAnnProfSubjInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutannProfSubjInput!]
  create: [ScoreCreateWithoutAnnProfSubjInput!]
}

input ScoreCreateManyWithoutAnnStudentClassInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutannStudentClassInput!]
  create: [ScoreCreateWithoutAnnStudentClassInput!]
}

input ScoreCreateManyWithoutSequenceInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutSequenceInput!]
  create: [ScoreCreateWithoutSequenceInput!]
}

input ScoreCreateOrConnectWithoutannProfSubjInput {
  create: ScoreCreateWithoutAnnProfSubjInput!
  where: ScoreWhereUniqueInput!
}

input ScoreCreateOrConnectWithoutannStudentClassInput {
  create: ScoreCreateWithoutAnnStudentClassInput!
  where: ScoreWhereUniqueInput!
}

input ScoreCreateOrConnectWithoutSequenceInput {
  create: ScoreCreateWithoutSequenceInput!
  where: ScoreWhereUniqueInput!
}

input ScoreCreateWithoutAnnProfSubjInput {
  annStudentClass: AnnStudentClassroomCreateManyWithoutScoreInput
  createdAt: DateTime
  id: String
  marks: String!
  Sequence: SequenceCreateOneWithoutScoreInput!
  updatedAt: DateTime
}

input ScoreCreateWithoutAnnStudentClassInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutScoreInput
  createdAt: DateTime
  id: String
  marks: String!
  Sequence: SequenceCreateOneWithoutScoreInput!
  updatedAt: DateTime
}

input ScoreCreateWithoutSequenceInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutScoreInput
  annStudentClass: AnnStudentClassroomCreateManyWithoutScoreInput
  createdAt: DateTime
  id: String
  marks: String!
  updatedAt: DateTime
}

input ScoreListRelationFilter {
  every: ScoreWhereInput
  none: ScoreWhereInput
  some: ScoreWhereInput
}

input ScoreScalarWhereInput {
  AND: [ScoreScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  marks: StringFilter
  NOT: [ScoreScalarWhereInput!]
  OR: [ScoreScalarWhereInput!]
  sequenceId: StringFilter
  updatedAt: DateTimeFilter
}

input ScoreUpdateInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutScoreInput
  annStudentClass: AnnStudentClassroomUpdateManyWithoutScoreInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marks: StringFieldUpdateOperationsInput
  Sequence: SequenceUpdateOneRequiredWithoutScoreInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScoreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marks: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScoreUpdateManyWithoutAnnProfSubjInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutannProfSubjInput!]
  create: [ScoreCreateWithoutAnnProfSubjInput!]
  delete: [ScoreWhereUniqueInput!]
  deleteMany: [ScoreScalarWhereInput!]
  disconnect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutAnnProfSubjInput!]
  updateMany: [ScoreUpdateManyWithWhereWithoutAnnProfSubjInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutAnnProfSubjInput!]
}

input ScoreUpdateManyWithoutAnnStudentClassInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutannStudentClassInput!]
  create: [ScoreCreateWithoutAnnStudentClassInput!]
  delete: [ScoreWhereUniqueInput!]
  deleteMany: [ScoreScalarWhereInput!]
  disconnect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutAnnStudentClassInput!]
  updateMany: [ScoreUpdateManyWithWhereWithoutAnnStudentClassInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutAnnStudentClassInput!]
}

input ScoreUpdateManyWithoutSequenceInput {
  connect: [ScoreWhereUniqueInput!]
  connectOrCreate: [ScoreCreateOrConnectWithoutSequenceInput!]
  create: [ScoreCreateWithoutSequenceInput!]
  delete: [ScoreWhereUniqueInput!]
  deleteMany: [ScoreScalarWhereInput!]
  disconnect: [ScoreWhereUniqueInput!]
  set: [ScoreWhereUniqueInput!]
  update: [ScoreUpdateWithWhereUniqueWithoutSequenceInput!]
  updateMany: [ScoreUpdateManyWithWhereWithoutSequenceInput!]
  upsert: [ScoreUpsertWithWhereUniqueWithoutSequenceInput!]
}

input ScoreUpdateManyWithWhereWithoutAnnProfSubjInput {
  data: ScoreUpdateManyMutationInput!
  where: ScoreScalarWhereInput!
}

input ScoreUpdateManyWithWhereWithoutAnnStudentClassInput {
  data: ScoreUpdateManyMutationInput!
  where: ScoreScalarWhereInput!
}

input ScoreUpdateManyWithWhereWithoutSequenceInput {
  data: ScoreUpdateManyMutationInput!
  where: ScoreScalarWhereInput!
}

input ScoreUpdateWithoutAnnProfSubjInput {
  annStudentClass: AnnStudentClassroomUpdateManyWithoutScoreInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marks: StringFieldUpdateOperationsInput
  Sequence: SequenceUpdateOneRequiredWithoutScoreInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScoreUpdateWithoutAnnStudentClassInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutScoreInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marks: StringFieldUpdateOperationsInput
  Sequence: SequenceUpdateOneRequiredWithoutScoreInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScoreUpdateWithoutSequenceInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutScoreInput
  annStudentClass: AnnStudentClassroomUpdateManyWithoutScoreInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marks: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScoreUpdateWithWhereUniqueWithoutAnnProfSubjInput {
  data: ScoreUpdateWithoutAnnProfSubjInput!
  where: ScoreWhereUniqueInput!
}

input ScoreUpdateWithWhereUniqueWithoutAnnStudentClassInput {
  data: ScoreUpdateWithoutAnnStudentClassInput!
  where: ScoreWhereUniqueInput!
}

input ScoreUpdateWithWhereUniqueWithoutSequenceInput {
  data: ScoreUpdateWithoutSequenceInput!
  where: ScoreWhereUniqueInput!
}

input ScoreUpsertWithWhereUniqueWithoutAnnProfSubjInput {
  create: ScoreCreateWithoutAnnProfSubjInput!
  update: ScoreUpdateWithoutAnnProfSubjInput!
  where: ScoreWhereUniqueInput!
}

input ScoreUpsertWithWhereUniqueWithoutAnnStudentClassInput {
  create: ScoreCreateWithoutAnnStudentClassInput!
  update: ScoreUpdateWithoutAnnStudentClassInput!
  where: ScoreWhereUniqueInput!
}

input ScoreUpsertWithWhereUniqueWithoutSequenceInput {
  create: ScoreCreateWithoutSequenceInput!
  update: ScoreUpdateWithoutSequenceInput!
  where: ScoreWhereUniqueInput!
}

input ScoreWhereInput {
  AND: [ScoreWhereInput!]
  annProfSubj: AnnProfSubjDistroListRelationFilter
  annStudentClass: AnnStudentClassroomListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  marks: StringFilter
  NOT: [ScoreWhereInput!]
  OR: [ScoreWhereInput!]
  Sequence: SequenceWhereInput
  sequenceId: StringFilter
  updatedAt: DateTimeFilter
}

input ScoreWhereUniqueInput {
  id: String
}

type Section {
  departments: [Department]
  id: String!
  sectionCode: String!
  sectionName: String!
}

input SectionCreateInput {
  classroom: ClassroomCreateManyWithoutSectionInput
  createdAt: DateTime
  department: DepartmentCreateManyWithoutSectionInput
  id: String
  School: SchoolCreateOneWithoutSectionInput!
  sectionCode: String!
  sectionName: String!
  updatedAt: DateTime
}

input SectionCreateManyWithoutSchoolInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutSchoolInput!]
  create: [SectionCreateWithoutSchoolInput!]
}

input SectionCreateOneWithoutClassroomInput {
  connect: SectionWhereUniqueInput
  connectOrCreate: SectionCreateOrConnectWithoutclassroomInput
  create: SectionCreateWithoutClassroomInput
}

input SectionCreateOneWithoutDepartmentInput {
  connect: SectionWhereUniqueInput
  connectOrCreate: SectionCreateOrConnectWithoutdepartmentInput
  create: SectionCreateWithoutDepartmentInput
}

input SectionCreateOrConnectWithoutclassroomInput {
  create: SectionCreateWithoutClassroomInput!
  where: SectionWhereUniqueInput!
}

input SectionCreateOrConnectWithoutdepartmentInput {
  create: SectionCreateWithoutDepartmentInput!
  where: SectionWhereUniqueInput!
}

input SectionCreateOrConnectWithoutSchoolInput {
  create: SectionCreateWithoutSchoolInput!
  where: SectionWhereUniqueInput!
}

input SectionCreateWithoutClassroomInput {
  createdAt: DateTime
  department: DepartmentCreateManyWithoutSectionInput
  id: String
  School: SchoolCreateOneWithoutSectionInput!
  sectionCode: String!
  sectionName: String!
  updatedAt: DateTime
}

input SectionCreateWithoutDepartmentInput {
  classroom: ClassroomCreateManyWithoutSectionInput
  createdAt: DateTime
  id: String
  School: SchoolCreateOneWithoutSectionInput!
  sectionCode: String!
  sectionName: String!
  updatedAt: DateTime
}

input SectionCreateWithoutSchoolInput {
  classroom: ClassroomCreateManyWithoutSectionInput
  createdAt: DateTime
  department: DepartmentCreateManyWithoutSectionInput
  id: String
  sectionCode: String!
  sectionName: String!
  updatedAt: DateTime
}

input SectionListRelationFilter {
  every: SectionWhereInput
  none: SectionWhereInput
  some: SectionWhereInput
}

input SectionScalarWhereInput {
  AND: [SectionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SectionScalarWhereInput!]
  OR: [SectionScalarWhereInput!]
  schoolId: StringFilter
  sectionCode: StringFilter
  sectionName: StringFilter
  updatedAt: DateTimeFilter
}

input SectionUpdateInput {
  classroom: ClassroomUpdateManyWithoutSectionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateManyWithoutSectionInput
  id: StringFieldUpdateOperationsInput
  School: SchoolUpdateOneRequiredWithoutSectionInput
  sectionCode: StringFieldUpdateOperationsInput
  sectionName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SectionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sectionCode: StringFieldUpdateOperationsInput
  sectionName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SectionUpdateManyWithoutSchoolInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutSchoolInput!]
  create: [SectionCreateWithoutSchoolInput!]
  delete: [SectionWhereUniqueInput!]
  deleteMany: [SectionScalarWhereInput!]
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [SectionUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutSchoolInput!]
}

input SectionUpdateManyWithWhereWithoutSchoolInput {
  data: SectionUpdateManyMutationInput!
  where: SectionScalarWhereInput!
}

input SectionUpdateOneRequiredWithoutClassroomInput {
  connect: SectionWhereUniqueInput
  connectOrCreate: SectionCreateOrConnectWithoutclassroomInput
  create: SectionCreateWithoutClassroomInput
  update: SectionUpdateWithoutClassroomInput
  upsert: SectionUpsertWithoutClassroomInput
}

input SectionUpdateOneRequiredWithoutDepartmentInput {
  connect: SectionWhereUniqueInput
  connectOrCreate: SectionCreateOrConnectWithoutdepartmentInput
  create: SectionCreateWithoutDepartmentInput
  update: SectionUpdateWithoutDepartmentInput
  upsert: SectionUpsertWithoutDepartmentInput
}

input SectionUpdateWithoutClassroomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateManyWithoutSectionInput
  id: StringFieldUpdateOperationsInput
  School: SchoolUpdateOneRequiredWithoutSectionInput
  sectionCode: StringFieldUpdateOperationsInput
  sectionName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SectionUpdateWithoutDepartmentInput {
  classroom: ClassroomUpdateManyWithoutSectionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  School: SchoolUpdateOneRequiredWithoutSectionInput
  sectionCode: StringFieldUpdateOperationsInput
  sectionName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SectionUpdateWithoutSchoolInput {
  classroom: ClassroomUpdateManyWithoutSectionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateManyWithoutSectionInput
  id: StringFieldUpdateOperationsInput
  sectionCode: StringFieldUpdateOperationsInput
  sectionName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SectionUpdateWithWhereUniqueWithoutSchoolInput {
  data: SectionUpdateWithoutSchoolInput!
  where: SectionWhereUniqueInput!
}

input SectionUpsertWithoutClassroomInput {
  create: SectionCreateWithoutClassroomInput!
  update: SectionUpdateWithoutClassroomInput!
}

input SectionUpsertWithoutDepartmentInput {
  create: SectionCreateWithoutDepartmentInput!
  update: SectionUpdateWithoutDepartmentInput!
}

input SectionUpsertWithWhereUniqueWithoutSchoolInput {
  create: SectionCreateWithoutSchoolInput!
  update: SectionUpdateWithoutSchoolInput!
  where: SectionWhereUniqueInput!
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  classroom: ClassroomListRelationFilter
  createdAt: DateTimeFilter
  department: DepartmentListRelationFilter
  id: StringFilter
  NOT: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  School: SchoolWhereInput
  schoolId: StringFilter
  sectionCode: StringFilter
  sectionName: StringFilter
  updatedAt: DateTimeFilter
}

input SectionWhereUniqueInput {
  id: String
}

type Sequence {
  id: String!
  score: [Score]
  seqCode: String!
  seqName: String!
}

input SequenceCreateInput {
  createdAt: DateTime
  id: String
  score: ScoreCreateManyWithoutSequenceInput
  seqCode: String!
  seqName: String!
  Term: TermCreateOneWithoutSequenceInput!
  updatedAt: DateTime
}

input SequenceCreateManyWithoutTermInput {
  connect: [SequenceWhereUniqueInput!]
  connectOrCreate: [SequenceCreateOrConnectWithoutTermInput!]
  create: [SequenceCreateWithoutTermInput!]
}

input SequenceCreateOneWithoutScoreInput {
  connect: SequenceWhereUniqueInput
  connectOrCreate: SequenceCreateOrConnectWithoutscoreInput
  create: SequenceCreateWithoutScoreInput
}

input SequenceCreateOrConnectWithoutscoreInput {
  create: SequenceCreateWithoutScoreInput!
  where: SequenceWhereUniqueInput!
}

input SequenceCreateOrConnectWithoutTermInput {
  create: SequenceCreateWithoutTermInput!
  where: SequenceWhereUniqueInput!
}

input SequenceCreateWithoutScoreInput {
  createdAt: DateTime
  id: String
  seqCode: String!
  seqName: String!
  Term: TermCreateOneWithoutSequenceInput!
  updatedAt: DateTime
}

input SequenceCreateWithoutTermInput {
  createdAt: DateTime
  id: String
  score: ScoreCreateManyWithoutSequenceInput
  seqCode: String!
  seqName: String!
  updatedAt: DateTime
}

input SequenceListRelationFilter {
  every: SequenceWhereInput
  none: SequenceWhereInput
  some: SequenceWhereInput
}

input SequenceScalarWhereInput {
  AND: [SequenceScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SequenceScalarWhereInput!]
  OR: [SequenceScalarWhereInput!]
  seqCode: StringFilter
  seqName: StringFilter
  termId: StringFilter
  updatedAt: DateTimeFilter
}

input SequenceUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  score: ScoreUpdateManyWithoutSequenceInput
  seqCode: StringFieldUpdateOperationsInput
  seqName: StringFieldUpdateOperationsInput
  Term: TermUpdateOneRequiredWithoutSequenceInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SequenceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  seqCode: StringFieldUpdateOperationsInput
  seqName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SequenceUpdateManyWithoutTermInput {
  connect: [SequenceWhereUniqueInput!]
  connectOrCreate: [SequenceCreateOrConnectWithoutTermInput!]
  create: [SequenceCreateWithoutTermInput!]
  delete: [SequenceWhereUniqueInput!]
  deleteMany: [SequenceScalarWhereInput!]
  disconnect: [SequenceWhereUniqueInput!]
  set: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutTermInput!]
  updateMany: [SequenceUpdateManyWithWhereWithoutTermInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutTermInput!]
}

input SequenceUpdateManyWithWhereWithoutTermInput {
  data: SequenceUpdateManyMutationInput!
  where: SequenceScalarWhereInput!
}

input SequenceUpdateOneRequiredWithoutScoreInput {
  connect: SequenceWhereUniqueInput
  connectOrCreate: SequenceCreateOrConnectWithoutscoreInput
  create: SequenceCreateWithoutScoreInput
  update: SequenceUpdateWithoutScoreInput
  upsert: SequenceUpsertWithoutScoreInput
}

input SequenceUpdateWithoutScoreInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  seqCode: StringFieldUpdateOperationsInput
  seqName: StringFieldUpdateOperationsInput
  Term: TermUpdateOneRequiredWithoutSequenceInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SequenceUpdateWithoutTermInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  score: ScoreUpdateManyWithoutSequenceInput
  seqCode: StringFieldUpdateOperationsInput
  seqName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SequenceUpdateWithWhereUniqueWithoutTermInput {
  data: SequenceUpdateWithoutTermInput!
  where: SequenceWhereUniqueInput!
}

input SequenceUpsertWithoutScoreInput {
  create: SequenceCreateWithoutScoreInput!
  update: SequenceUpdateWithoutScoreInput!
}

input SequenceUpsertWithWhereUniqueWithoutTermInput {
  create: SequenceCreateWithoutTermInput!
  update: SequenceUpdateWithoutTermInput!
  where: SequenceWhereUniqueInput!
}

input SequenceWhereInput {
  AND: [SequenceWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SequenceWhereInput!]
  OR: [SequenceWhereInput!]
  score: ScoreListRelationFilter
  seqCode: StringFilter
  seqName: StringFilter
  Term: TermWhereInput
  termId: StringFilter
  updatedAt: DateTimeFilter
}

input SequenceWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Student {
  annStudentClassroom: [AnnStudentClassroom]
  dateOfBirth: DateTime!
  email: String!
  gender: String!
  id: String!
  image: String!
  phoneNumber: Int!
  placeOfBirth: String!
  student1stName: String!
  student2ndName: String!
  student3rdName: String!
  studentMatricule: String!
  studentSecretCode: String!
}

input StudentCreateInput {
  annStudentClassroom: AnnStudentClassroomCreateManyWithoutStudentInput
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String!
  gender: String!
  id: String
  image: String!
  phoneNumber: Int!
  placeOfBirth: String!
  student1stName: String!
  student2ndName: String!
  student3rdName: String!
  studentMatricule: String!
  studentSecretCode: String!
  updatedAt: DateTime
}

input StudentCreateOneWithoutAnnStudentClassroomInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutannStudentClassroomInput
  create: StudentCreateWithoutAnnStudentClassroomInput
}

input StudentCreateOrConnectWithoutannStudentClassroomInput {
  create: StudentCreateWithoutAnnStudentClassroomInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateWithoutAnnStudentClassroomInput {
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String!
  gender: String!
  id: String
  image: String!
  phoneNumber: Int!
  placeOfBirth: String!
  student1stName: String!
  student2ndName: String!
  student3rdName: String!
  studentMatricule: String!
  studentSecretCode: String!
  updatedAt: DateTime
}

input StudentUpdateInput {
  annStudentClassroom: AnnStudentClassroomUpdateManyWithoutStudentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  phoneNumber: IntFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  student1stName: StringFieldUpdateOperationsInput
  student2ndName: StringFieldUpdateOperationsInput
  student3rdName: StringFieldUpdateOperationsInput
  studentMatricule: StringFieldUpdateOperationsInput
  studentSecretCode: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateOneRequiredWithoutAnnStudentClassroomInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutannStudentClassroomInput
  create: StudentCreateWithoutAnnStudentClassroomInput
  update: StudentUpdateWithoutAnnStudentClassroomInput
  upsert: StudentUpsertWithoutAnnStudentClassroomInput
}

input StudentUpdateWithoutAnnStudentClassroomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  gender: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  phoneNumber: IntFieldUpdateOperationsInput
  placeOfBirth: StringFieldUpdateOperationsInput
  student1stName: StringFieldUpdateOperationsInput
  student2ndName: StringFieldUpdateOperationsInput
  student3rdName: StringFieldUpdateOperationsInput
  studentMatricule: StringFieldUpdateOperationsInput
  studentSecretCode: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpsertWithoutAnnStudentClassroomInput {
  create: StudentCreateWithoutAnnStudentClassroomInput!
  update: StudentUpdateWithoutAnnStudentClassroomInput!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  annStudentClassroom: AnnStudentClassroomListRelationFilter
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeFilter
  email: StringFilter
  gender: StringFilter
  id: StringFilter
  image: StringFilter
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  phoneNumber: IntFilter
  placeOfBirth: StringFilter
  student1stName: StringFilter
  student2ndName: StringFilter
  student3rdName: StringFilter
  studentMatricule: StringFilter
  studentSecretCode: StringFilter
  updatedAt: DateTimeFilter
}

input StudentWhereUniqueInput {
  id: String
  studentSecretCode: String
}

type Subdivision {
  id: String!
  subdivCode: String!
  subdivName: String!
  towns: [Town]
}

input SubdivisionCreateInput {
  createdAt: DateTime
  Division: DivisionCreateOneWithoutSubdivInput!
  id: String
  subdivCode: String!
  subdivName: String!
  town: TownCreateManyWithoutSubdivisionInput
  updatedAt: DateTime
}

input SubdivisionCreateManyWithoutDivisionInput {
  connect: [SubdivisionWhereUniqueInput!]
  connectOrCreate: [SubdivisionCreateOrConnectWithoutDivisionInput!]
  create: [SubdivisionCreateWithoutDivisionInput!]
}

input SubdivisionCreateOneWithoutTownInput {
  connect: SubdivisionWhereUniqueInput
  connectOrCreate: SubdivisionCreateOrConnectWithouttownInput
  create: SubdivisionCreateWithoutTownInput
}

input SubdivisionCreateOrConnectWithoutDivisionInput {
  create: SubdivisionCreateWithoutDivisionInput!
  where: SubdivisionWhereUniqueInput!
}

input SubdivisionCreateOrConnectWithouttownInput {
  create: SubdivisionCreateWithoutTownInput!
  where: SubdivisionWhereUniqueInput!
}

input SubdivisionCreateWithoutDivisionInput {
  createdAt: DateTime
  id: String
  subdivCode: String!
  subdivName: String!
  town: TownCreateManyWithoutSubdivisionInput
  updatedAt: DateTime
}

input SubdivisionCreateWithoutTownInput {
  createdAt: DateTime
  Division: DivisionCreateOneWithoutSubdivInput!
  id: String
  subdivCode: String!
  subdivName: String!
  updatedAt: DateTime
}

input SubdivisionListRelationFilter {
  every: SubdivisionWhereInput
  none: SubdivisionWhereInput
  some: SubdivisionWhereInput
}

input SubdivisionScalarWhereInput {
  AND: [SubdivisionScalarWhereInput!]
  createdAt: DateTimeFilter
  divisionId: StringFilter
  id: StringFilter
  NOT: [SubdivisionScalarWhereInput!]
  OR: [SubdivisionScalarWhereInput!]
  subdivCode: StringFilter
  subdivName: StringFilter
  updatedAt: DateTimeFilter
}

input SubdivisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Division: DivisionUpdateOneRequiredWithoutSubdivInput
  id: StringFieldUpdateOperationsInput
  subdivCode: StringFieldUpdateOperationsInput
  subdivName: StringFieldUpdateOperationsInput
  town: TownUpdateManyWithoutSubdivisionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubdivisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subdivCode: StringFieldUpdateOperationsInput
  subdivName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubdivisionUpdateManyWithoutDivisionInput {
  connect: [SubdivisionWhereUniqueInput!]
  connectOrCreate: [SubdivisionCreateOrConnectWithoutDivisionInput!]
  create: [SubdivisionCreateWithoutDivisionInput!]
  delete: [SubdivisionWhereUniqueInput!]
  deleteMany: [SubdivisionScalarWhereInput!]
  disconnect: [SubdivisionWhereUniqueInput!]
  set: [SubdivisionWhereUniqueInput!]
  update: [SubdivisionUpdateWithWhereUniqueWithoutDivisionInput!]
  updateMany: [SubdivisionUpdateManyWithWhereWithoutDivisionInput!]
  upsert: [SubdivisionUpsertWithWhereUniqueWithoutDivisionInput!]
}

input SubdivisionUpdateManyWithWhereWithoutDivisionInput {
  data: SubdivisionUpdateManyMutationInput!
  where: SubdivisionScalarWhereInput!
}

input SubdivisionUpdateOneRequiredWithoutTownInput {
  connect: SubdivisionWhereUniqueInput
  connectOrCreate: SubdivisionCreateOrConnectWithouttownInput
  create: SubdivisionCreateWithoutTownInput
  update: SubdivisionUpdateWithoutTownInput
  upsert: SubdivisionUpsertWithoutTownInput
}

input SubdivisionUpdateWithoutDivisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subdivCode: StringFieldUpdateOperationsInput
  subdivName: StringFieldUpdateOperationsInput
  town: TownUpdateManyWithoutSubdivisionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubdivisionUpdateWithoutTownInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Division: DivisionUpdateOneRequiredWithoutSubdivInput
  id: StringFieldUpdateOperationsInput
  subdivCode: StringFieldUpdateOperationsInput
  subdivName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubdivisionUpdateWithWhereUniqueWithoutDivisionInput {
  data: SubdivisionUpdateWithoutDivisionInput!
  where: SubdivisionWhereUniqueInput!
}

input SubdivisionUpsertWithoutTownInput {
  create: SubdivisionCreateWithoutTownInput!
  update: SubdivisionUpdateWithoutTownInput!
}

input SubdivisionUpsertWithWhereUniqueWithoutDivisionInput {
  create: SubdivisionCreateWithoutDivisionInput!
  update: SubdivisionUpdateWithoutDivisionInput!
  where: SubdivisionWhereUniqueInput!
}

input SubdivisionWhereInput {
  AND: [SubdivisionWhereInput!]
  createdAt: DateTimeFilter
  Division: DivisionWhereInput
  divisionId: StringFilter
  id: StringFilter
  NOT: [SubdivisionWhereInput!]
  OR: [SubdivisionWhereInput!]
  subdivCode: StringFilter
  subdivName: StringFilter
  town: TownListRelationFilter
  updatedAt: DateTimeFilter
}

input SubdivisionWhereUniqueInput {
  id: String
}

type Subject {
  id: String!
  subjectCode: String!
  subjectName: String!
}

input SubjectCreateInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutSubjectInput
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutSubjectInput!
  id: String
  subjectCode: String!
  subjectName: String!
  updatedAt: DateTime
}

input SubjectCreateManyWithoutDepartmentInput {
  connect: [SubjectWhereUniqueInput!]
  connectOrCreate: [SubjectCreateOrConnectWithoutDepartmentInput!]
  create: [SubjectCreateWithoutDepartmentInput!]
}

input SubjectCreateOneWithoutAnnProfSubjInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutannProfSubjInput
  create: SubjectCreateWithoutAnnProfSubjInput
}

input SubjectCreateOrConnectWithoutannProfSubjInput {
  create: SubjectCreateWithoutAnnProfSubjInput!
  where: SubjectWhereUniqueInput!
}

input SubjectCreateOrConnectWithoutDepartmentInput {
  create: SubjectCreateWithoutDepartmentInput!
  where: SubjectWhereUniqueInput!
}

input SubjectCreateWithoutAnnProfSubjInput {
  createdAt: DateTime
  Department: DepartmentCreateOneWithoutSubjectInput!
  id: String
  subjectCode: String!
  subjectName: String!
  updatedAt: DateTime
}

input SubjectCreateWithoutDepartmentInput {
  annProfSubj: AnnProfSubjDistroCreateManyWithoutSubjectInput
  createdAt: DateTime
  id: String
  subjectCode: String!
  subjectName: String!
  updatedAt: DateTime
}

input SubjectListRelationFilter {
  every: SubjectWhereInput
  none: SubjectWhereInput
  some: SubjectWhereInput
}

input SubjectScalarWhereInput {
  AND: [SubjectScalarWhereInput!]
  createdAt: DateTimeFilter
  departmentId: StringFilter
  id: StringFilter
  NOT: [SubjectScalarWhereInput!]
  OR: [SubjectScalarWhereInput!]
  subjectCode: StringFilter
  subjectName: StringFilter
  updatedAt: DateTimeFilter
}

input SubjectUpdateInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutSubjectInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutSubjectInput
  id: StringFieldUpdateOperationsInput
  subjectCode: StringFieldUpdateOperationsInput
  subjectName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subjectCode: StringFieldUpdateOperationsInput
  subjectName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateManyWithoutDepartmentInput {
  connect: [SubjectWhereUniqueInput!]
  connectOrCreate: [SubjectCreateOrConnectWithoutDepartmentInput!]
  create: [SubjectCreateWithoutDepartmentInput!]
  delete: [SubjectWhereUniqueInput!]
  deleteMany: [SubjectScalarWhereInput!]
  disconnect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [SubjectUpdateManyWithWhereWithoutDepartmentInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input SubjectUpdateManyWithWhereWithoutDepartmentInput {
  data: SubjectUpdateManyMutationInput!
  where: SubjectScalarWhereInput!
}

input SubjectUpdateOneRequiredWithoutAnnProfSubjInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutannProfSubjInput
  create: SubjectCreateWithoutAnnProfSubjInput
  update: SubjectUpdateWithoutAnnProfSubjInput
  upsert: SubjectUpsertWithoutAnnProfSubjInput
}

input SubjectUpdateWithoutAnnProfSubjInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Department: DepartmentUpdateOneRequiredWithoutSubjectInput
  id: StringFieldUpdateOperationsInput
  subjectCode: StringFieldUpdateOperationsInput
  subjectName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateWithoutDepartmentInput {
  annProfSubj: AnnProfSubjDistroUpdateManyWithoutSubjectInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subjectCode: StringFieldUpdateOperationsInput
  subjectName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateWithWhereUniqueWithoutDepartmentInput {
  data: SubjectUpdateWithoutDepartmentInput!
  where: SubjectWhereUniqueInput!
}

input SubjectUpsertWithoutAnnProfSubjInput {
  create: SubjectCreateWithoutAnnProfSubjInput!
  update: SubjectUpdateWithoutAnnProfSubjInput!
}

input SubjectUpsertWithWhereUniqueWithoutDepartmentInput {
  create: SubjectCreateWithoutDepartmentInput!
  update: SubjectUpdateWithoutDepartmentInput!
  where: SubjectWhereUniqueInput!
}

input SubjectWhereInput {
  AND: [SubjectWhereInput!]
  annProfSubj: AnnProfSubjDistroListRelationFilter
  createdAt: DateTimeFilter
  Department: DepartmentWhereInput
  departmentId: StringFilter
  id: StringFilter
  NOT: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  subjectCode: StringFilter
  subjectName: StringFilter
  updatedAt: DateTimeFilter
}

input SubjectWhereUniqueInput {
  id: String
}

type Term {
  id: String!
  sequence: [Sequence]
  termCode: String!
  termName: String!
}

input TermCreateInput {
  createdAt: DateTime
  id: String
  sequence: SequenceCreateManyWithoutTermInput
  termCode: String!
  termName: String!
  updatedAt: DateTime
}

input TermCreateOneWithoutSequenceInput {
  connect: TermWhereUniqueInput
  connectOrCreate: TermCreateOrConnectWithoutsequenceInput
  create: TermCreateWithoutSequenceInput
}

input TermCreateOrConnectWithoutsequenceInput {
  create: TermCreateWithoutSequenceInput!
  where: TermWhereUniqueInput!
}

input TermCreateWithoutSequenceInput {
  createdAt: DateTime
  id: String
  termCode: String!
  termName: String!
  updatedAt: DateTime
}

input TermUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sequence: SequenceUpdateManyWithoutTermInput
  termCode: StringFieldUpdateOperationsInput
  termName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TermUpdateOneRequiredWithoutSequenceInput {
  connect: TermWhereUniqueInput
  connectOrCreate: TermCreateOrConnectWithoutsequenceInput
  create: TermCreateWithoutSequenceInput
  update: TermUpdateWithoutSequenceInput
  upsert: TermUpsertWithoutSequenceInput
}

input TermUpdateWithoutSequenceInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  termCode: StringFieldUpdateOperationsInput
  termName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TermUpsertWithoutSequenceInput {
  create: TermCreateWithoutSequenceInput!
  update: TermUpdateWithoutSequenceInput!
}

input TermWhereInput {
  AND: [TermWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [TermWhereInput!]
  OR: [TermWhereInput!]
  sequence: SequenceListRelationFilter
  termCode: StringFilter
  termName: StringFilter
  updatedAt: DateTimeFilter
}

input TermWhereUniqueInput {
  id: String
}

type Town {
  id: String!
  schools: [School]
  townCode: String!
  townName: String!
}

input TownCreateInput {
  createdAt: DateTime
  id: String
  school: SchoolCreateManyWithoutTownInput
  Subdivision: SubdivisionCreateOneWithoutTownInput!
  townCode: String!
  townName: String!
  updatedAt: DateTime
}

input TownCreateManyWithoutSubdivisionInput {
  connect: [TownWhereUniqueInput!]
  connectOrCreate: [TownCreateOrConnectWithoutSubdivisionInput!]
  create: [TownCreateWithoutSubdivisionInput!]
}

input TownCreateOneWithoutSchoolInput {
  connect: TownWhereUniqueInput
  connectOrCreate: TownCreateOrConnectWithoutschoolInput
  create: TownCreateWithoutSchoolInput
}

input TownCreateOrConnectWithoutschoolInput {
  create: TownCreateWithoutSchoolInput!
  where: TownWhereUniqueInput!
}

input TownCreateOrConnectWithoutSubdivisionInput {
  create: TownCreateWithoutSubdivisionInput!
  where: TownWhereUniqueInput!
}

input TownCreateWithoutSchoolInput {
  createdAt: DateTime
  id: String
  Subdivision: SubdivisionCreateOneWithoutTownInput!
  townCode: String!
  townName: String!
  updatedAt: DateTime
}

input TownCreateWithoutSubdivisionInput {
  createdAt: DateTime
  id: String
  school: SchoolCreateManyWithoutTownInput
  townCode: String!
  townName: String!
  updatedAt: DateTime
}

input TownListRelationFilter {
  every: TownWhereInput
  none: TownWhereInput
  some: TownWhereInput
}

input TownScalarWhereInput {
  AND: [TownScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [TownScalarWhereInput!]
  OR: [TownScalarWhereInput!]
  subdivisionId: StringFilter
  townCode: StringFilter
  townName: StringFilter
  updatedAt: DateTimeFilter
}

input TownUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateManyWithoutTownInput
  Subdivision: SubdivisionUpdateOneRequiredWithoutTownInput
  townCode: StringFieldUpdateOperationsInput
  townName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TownUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  townCode: StringFieldUpdateOperationsInput
  townName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TownUpdateManyWithoutSubdivisionInput {
  connect: [TownWhereUniqueInput!]
  connectOrCreate: [TownCreateOrConnectWithoutSubdivisionInput!]
  create: [TownCreateWithoutSubdivisionInput!]
  delete: [TownWhereUniqueInput!]
  deleteMany: [TownScalarWhereInput!]
  disconnect: [TownWhereUniqueInput!]
  set: [TownWhereUniqueInput!]
  update: [TownUpdateWithWhereUniqueWithoutSubdivisionInput!]
  updateMany: [TownUpdateManyWithWhereWithoutSubdivisionInput!]
  upsert: [TownUpsertWithWhereUniqueWithoutSubdivisionInput!]
}

input TownUpdateManyWithWhereWithoutSubdivisionInput {
  data: TownUpdateManyMutationInput!
  where: TownScalarWhereInput!
}

input TownUpdateOneRequiredWithoutSchoolInput {
  connect: TownWhereUniqueInput
  connectOrCreate: TownCreateOrConnectWithoutschoolInput
  create: TownCreateWithoutSchoolInput
  update: TownUpdateWithoutSchoolInput
  upsert: TownUpsertWithoutSchoolInput
}

input TownUpdateWithoutSchoolInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  Subdivision: SubdivisionUpdateOneRequiredWithoutTownInput
  townCode: StringFieldUpdateOperationsInput
  townName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TownUpdateWithoutSubdivisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateManyWithoutTownInput
  townCode: StringFieldUpdateOperationsInput
  townName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TownUpdateWithWhereUniqueWithoutSubdivisionInput {
  data: TownUpdateWithoutSubdivisionInput!
  where: TownWhereUniqueInput!
}

input TownUpsertWithoutSchoolInput {
  create: TownCreateWithoutSchoolInput!
  update: TownUpdateWithoutSchoolInput!
}

input TownUpsertWithWhereUniqueWithoutSubdivisionInput {
  create: TownCreateWithoutSubdivisionInput!
  update: TownUpdateWithoutSubdivisionInput!
  where: TownWhereUniqueInput!
}

input TownWhereInput {
  AND: [TownWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [TownWhereInput!]
  OR: [TownWhereInput!]
  school: SchoolListRelationFilter
  Subdivision: SubdivisionWhereInput
  subdivisionId: StringFilter
  townCode: StringFilter
  townName: StringFilter
  updatedAt: DateTimeFilter
}

input TownWhereUniqueInput {
  id: String
}

type User {
  email: String!
  id: String!
  image: String!
  name: String!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  image: String!
  name: String!
  updatedAt: DateTime
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  image: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
}
